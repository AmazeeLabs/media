diff --git a/includes/media.filter.inc b/includes/media.filter.inc
index 5f1ece8..8f1f000 100644
--- a/includes/media.filter.inc
+++ b/includes/media.filter.inc
@@ -305,14 +305,27 @@ function media_token_to_markup($match, $wysiwyg = FALSE) {
 
     // Track the fid of this file in the {media_filter_usage} table.
     media_filter_track_usage($file->fid);
+    
+    // Grab the fields from the file. 
+    foreach($tag_info['fields'] as $field_name => $value){
+      if (strpos($field_name, 'field_') === 0) {
+        $components = explode('[', str_replace(']', '', $field_name));
+        $lang = $components[1];
+        $delta = $components[2];
+        $value_string = $components[3];
+        $fields[$components[0]][$lang][$delta][$value_string] = $value;
+      }
+    }
 
     $attributes = is_array($tag_info['attributes']) ? $tag_info['attributes'] : array();
     $attribute_whitelist = media_variable_get('wysiwyg_allowed_attributes');
     $settings['attributes'] = array_intersect_key($attributes, array_flip($attribute_whitelist));
-
+    $settings['fields'] = $fields;
+ 
     if (!empty($tag_info['attributes']) && is_array($tag_info['attributes'])) {
       $attribute_whitelist = media_variable_get('wysiwyg_allowed_attributes');
       $settings['attributes'] = array_intersect_key($tag_info['attributes'], array_flip($attribute_whitelist));
+      $settings['fields'] = $fields;
 
       // Many media formatters will want to apply width and height independently
       // of the style attribute or the corresponding HTML attributes, so pull
@@ -578,24 +591,9 @@ function media_format_form($form, $form_state, $file) {
       they are insterted into an editor.')
   );
 
-  if ($file->type === 'image') {
-    $form['options']['alt'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Alternate text'),
-      '#description' => t('Alternative text is used by screen readers, search
-        engines, and when the image cannot be loaded. By adding alt text you
-        improve accesibility and search engine optimization.'),
-      '#default_value' => isset($file->field_file_image_alt_text['und'][0]['safe_value']) ? $file->field_file_image_alt_text['und'][0]['safe_value'] : '',
-    );
-    $form['options']['title'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Title text'),
-      '#description' => t('Title text is used in the tool tip when a user hovers
-        their mouse over the image. Adding title text makes it easier to
-        understand the context of an image and improves usability.'),
-      '#default_value' => isset($file->field_file_image_title_text['und'][0]['safe_value']) ? $file->field_file_image_title_text['und'][0]['safe_value'] : '',
-    );
-  }
+  $form['options']['fields'] = array();
+  // Add fields.
+  field_attach_form('file', $file, $form['options']['fields'], $form_state);
 
   // Similar to a form_alter, but we want this to run first so that
   // media.types.inc can add the fields specific to a given type (like alt tags
diff --git a/js/wysiwyg-media.js b/js/wysiwyg-media.js
index 54a31f1..b98127d 100644
--- a/js/wysiwyg-media.js
+++ b/js/wysiwyg-media.js
@@ -172,7 +172,8 @@ InsertMedia.prototype = {
     var element = create_element(formatted_media.html, {
           fid: this.mediaFile.fid,
           view_mode: formatted_media.type,
-          attributes: formatted_media.options
+          attributes: formatted_media.options,
+          fields: formatted_media.options
         });
 
     var markup = outerHTML(element),
diff --git a/media.module b/media.module
index 4375984..eddf8dc 100644
--- a/media.module
+++ b/media.module
@@ -38,6 +38,7 @@ function media_hook_info() {
     'media_wysiwyg_allowed_view_modes_alter',
     'media_format_form_prepare_alter',
     'media_token_to_markup_alter',
+    'media_file_displays_alter',
     'query_media_browser_alter',
   );
 
@@ -1072,6 +1073,13 @@ function media_file_displays_alter(&$displays, $file, $view_mode) {
       'settings' => NULL,
     );
   }
+
+  // Override the fields of the file when requested by the WYSIWYG. 
+  if (isset($file->override) && isset($file->override['fields'])) {
+    foreach ($file->override['fields'] as $field => $value) {
+      $file->{$field} = $value;
+    }
+  }
 }
 
 /**

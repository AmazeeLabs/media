<?php
// $Id$

/**
 * @file
 * Media API
 *
 * The core Media API.
 * The Media module provides a drop-in replacement for Drupal's Upload,
 * FileField, Embedded Media Field, and other similar forms. It offers an API
 * and hooks available for other modules to implement, allowing for customized
 * file lists, tabs, drawers, and forms to the new Upload form.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

include_once('media.types.inc');
include_once('media.fields.inc');
include_once('media.filter.inc'); // Code related to [[inline tags]] and wysiwyg

/* ***************************************** */
/* CONSTANTS                                 */
/* ***************************************** */

define('MEDIA_RESOURCE_URI_DEFAULT', 'public://');
define('MEDIA_TYPES_DEFAULT', '*');


/* ***************************************** */
/* Hook Implementations                      */
/* ***************************************** */

/**
 * Implementation of hook_help()
 */

function media_help($path,$arg) {
  switch($path) {
    case 'admin/help#media':
      $output = '';
      $output .= '<h3>' .t('About') .'</h3>'; 
      $output .= '<p>' .t('The Media module is a File Browser to the Internet, media provides a framework for managing files and multimedia assets, regardless of whether they are hosted on your own site or a 3rd party site. It replaces the Drupal core upload field with a unified User Interface where editors and administrators can upload, manage, and reuse files and multimedia assets. Media module also provides rich integration with WYSIWYG module to let content creators access media assets in rich text editor. For more information check <a href="@media_faq">Media Module FAQ</a>',array('@media_faq' => 'http://groups.drupal.org/node/19746')) .'</p>';
      $output .= '<h3>' .t('Uses') .'</h3>';
      $output .= '<dl>';
      $output .= '<dt>' .t('Media Repository') .'</dt>';
      $output .= '<dd>' .t('Media module allows you to maintain a <a href="@mediarepo">media asset repository</a> where in you can add, remove, reuse your media assets. You can add the media file using upload form or from a url and also do bulk operations on the media assets.', array('@mediarepo' => url('admin/content/media'))) .'</dd>';
      $output .= '<dt>' .t('Attaching media assets to content types') .'</dt>';
      $output .= '<dd>' .t('Media assets can be attached to content types as fields. To add a media field to a <a href="@content-type">content type</a>, go to the content type\'s <em>manage fields</em> page, and add a new field of type <em>Multimedia Asset</em>.', array('@content-type' => url('admin/structure/types'))) .'</dd>';
      $output .= '<dt>' .t('Using media assets in WYSIWYG') .'</dt>';
      $output .= '<dd>' .t('Media module provides rich integration with WYSIWYG editors, using Media Browser plugin you can select media asset from library to add to the rich text editor moreover you can add media asset from the media browser itself using either upload method or add from url method. To configure media with WYSIWYG you need two steps of configuration:');
      $output .= '<ul><li>' .t('Enable WYSIWYG plugin on your desired <a href="@wysiwyg-profile">WYSIWYG profile</a>. Please note that you will need to have <a href="@wysiwyg">WYSIWYG</a> module enabled.', array('@wysiwyg-profile' => url('admin/config/content/wysiwyg'),'@wysiwyg' => 'http://drupal.org/project/wysiwyg')) .'</li>';
      $output .= '<li>' .t('Add Media Filter to the WYSIWYG enabled <a href="@input-format">Input format</a>', array('@input-format' => url('admin/config/content/formats'))) .'</li></ul></dd>';
      return $output;  
  }
}

/**
 * Implement of hook_menu().
 */
function media_menu() {
  // For managing different types of media and the fields associated with them.
  $items['admin/structure/media'] = array(
    'title' => 'Media Types',
    'description' => 'Manage files used on your site.',
    'page callback' => 'media_admin_type_list',
    'access arguments' => array('administer media'),
    'file' => 'media.admin.inc',
  );

  $items['admin/structure/media/manage/%media_type'] = array(
    'title' => 'Manage media',
    'description' => 'Manage files used on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin_type_manage_form', 4),
    'access arguments' => array('administer media'),
    'type' => MENU_CALLBACK,
    'file' => 'media.admin.inc',
  );

  $items['admin/structure/media/manage/%media_type/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  /**
   * Administrative screens for managing media
   * @var unknown_type
   */
  $items['admin/content/media'] = array(
    'title' => 'Media',
    'description' => 'Manage files used on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'media.admin.inc',
  );

  /**
   * End-user CRUD screens
   * @var unknown_type
   */

  $items['media/add/upload'] = array(
    'title' => 'Upload new file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_add_upload'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media.admin.inc',
    'weight' => -1,
  );

  $items['admin/content/media/add/upload'] = $items['media/add/upload'];

  $items['media/add/from_url'] = array(
    'title' => 'Add media from URL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_add_from_url'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media.admin.inc',
    'weight' => -1,
  );

  $items['admin/content/media/add/from_url'] = $items['media/add/from_url'];

  $items['media/browser'] = array(
    'title' => 'Media browser',
    'description' => 'Media Browser for picking media and uploading new media',
    'page callback' => 'media_browser',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'file' => 'media.browser.inc',
    'theme callback' => 'media_dialog_get_theme_name',
  );

  /**
   * Browser callbacks
   * @var unknown_type
   */
  $items['media/browser/list'] = array(
    'title' => 'Media browser list',
    'description' => 'Ajax Callback for getting media',
    'page callback' => 'media_browser_list',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'file' => 'media.browser.inc',
  );

  $items['media/browser/library'] = array(
    'title' => 'Media browser library',
    'description' => 'Media Browser for picking media and uploading new media',
    'page callback' => 'media_browser_library',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'file' => 'media.browser.inc',
  );

  $items['media/%media/format-form'] = array(
    'title' => 'Style selector',
    'description' => 'Choose a format for a piece of media',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_format_form', 1),
    'access arguments' => array('administer media'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    'file' => 'media.filter.inc',
    'theme callback' => 'media_dialog_get_theme_name',
  );

  $items['media'] = array(
    'title' => 'Media',
    'page callback' => 'media_page_default',
    'access arguments' => array('view media'),
    'type' => MENU_CALLBACK,
  );

  $items['media/%media'] = array(
    'page callback' => 'media_file_view',
    'page arguments' => array(1),
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'file' => 'media.pages.inc',
  );

  $items['media/%media/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['media/%media/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'media_page_edit',
    'page arguments'  => array(1),
    'access callback' => 'media_access',
    'access arguments' => array('edit'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'media.admin.inc',
    'file' => 'media.pages.inc',
  );

  return $items;
}

/**
 * Implement hook_permission().
 */
function media_permission() {
  return array(
    'administer media' => array(
      'title' => t('Administer media'),
      'description' => t('Add, edit or delete media.'),
    ),
    'view media' => array(
      'title' => t('View media'),
      'description' => t('View media.'), // @TODO better description
    ),
    'edit media' => array(
      'title' => t('Edit media'),
      'description' => t('Edit media.'), // @TODO better description
    ),
  );
}

/**
 * Implement hook_theme().
 */
function media_theme() {
  return array(
    'media_managed_file' => array(
      'render element' => 'element',
    ),

    // The media file browser form.
    'media_file_browser' => array(
      'variables' => array('element' => NULL),
    ),

    // The default media file list form element.
    'media_file_list' => array(
      'variables' => array('element' => NULL),
    ),

    // The media browser pane.
    'media_browser_pane' => array(
      'variables' => array('form' => array()),
    ),

    // A link for a file w/ an icon to the media/$fid page.
    'media_link' => array(
      'variables' => array('file' => NULL),
      'file' => 'media.theme.inc',
    ),

    // A preview of the uploaded file.
    'media_thumbnail' => array(
      'render element' => 'element',
      'file' => 'media.theme.inc',
    ),

    // Administrative thumbnail previews.
    'media_admin_thumbnail' => array(
      'variables' => array('files' => array(), 'style_name' => 'thumbnail'),
      'file' => 'media.theme.inc',
    ),

    // Tabs in the media browser.
    'media_browser_tabs' => array(
      'file' => 'media.theme.inc',
    ),

    // Dialog page.
    'media_dialog_page' => array(
      'render element' => 'page',
      'template' => 'media-dialog-page',
    ),
  );
}

/**
 * Implement of hook_media_elements().
 *
 * A Media File List element is created with the following FAPI:
 *   '#type' => 'media_file_list',
 *   '#options' => $options,         // An associative array of filepaths, keyed by FID.
 *   '#title' => $title,             // The translated title, displayed in the tab.
 *   '#description' => $description, // A translated description, to be displayed below the title.
 */
function media_elements() {
  $elements = array();

  $elements['media_file_list'] = array(
    '#input'            => TRUE,
    '#process'          => array('media_file_list_element_process'),
    '#element_validate' => array('media_file_list_element_validate'),
    '#submit'           => array('media_file_list_element_submit'),
  );

  return $elements;
}


/**
 * Implement hook_image_default_styles().
 */
function media_image_default_styles() {
  $styles = array();
  $styles['square_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 180, 'height' => 180),
        'weight' => 0,
      ),
    )
  );
  return $styles;
}

/**
 * Implement hook_file_insert().
 */
function media_file_insert(&$file) {
  $file->type = media_get_type($file);
  drupal_write_record('file', $file, array('fid'));
}

/**
 * Implement hook_file_update().
 */
function media_file_update(&$file) {
  media_file_insert($file);
}

/**
 * Implement hook_page_alter().
 */
function media_page_alter(&$page) {
  if (isset($_GET['render']) && $_GET['render'] == 'media-popup') {
    $page['#theme'] = 'media_dialog_page';
    foreach (element_children($page) as $key) {
      if ($key != 'content') {
        unset($page[$key]);
      }
    }
  }
}

/**
 * Implement of hook_form_alter().
 * We assign a form #after_build processing callback that is executed
 * on all forms after they have been completely built, so that we can
 * take the content of the textarea to inject our tagMap in Drupal.settings
 * to access on node/edit/<nid> or block/configure forms.
 *
 * @see media_process_form()
 */

function media_form_alter(&$form, &$form_state) {
  $form['#after_build'][] = 'media_process_form';
}

/**
 * Implement hook_media_display_types().
 * Different display types (list/thumbnails/etc).
 */
function media_media_display_types() {
  $path = drupal_get_path('module', 'media');
  $display_types = array();

  $display_types['list'] = array(
    'title' => t('List'),
    'description' => t('Display as a list.'),
    'icon' => $path . '/images/display-list.png',
    'icon_active' => $path . '/images/display-list-active.png',
    'callback' => 'media_admin_list',
    'file' => drupal_get_path('module', 'media') . '/media.admin.inc',
  );

  $display_types['thumbnails'] = array(
    'title' => t('Thumbnails'),
    'description' => t('Display as thumbnails.'),
    'icon' => $path . '/images/display-thumbnails.png',
    'icon_active' => $path . '/images/display-thumbnails-active.png',
    'callback' => 'media_admin_thumbnails',
    'file' => drupal_get_path('module', 'media') . '/media.admin.inc',
  );

  return $display_types;
}

/**
 * Implement hook_media_operations().
 * @todo: shouldn't this be using actions or something?
 */
function media_media_operations() {
  $operations = array(
    'delete' => array(
      'label' => t('Delete'),
      'callback' => NULL,
    ),
  );
  return $operations;
}

/* ***************************************** */
/* API FUNCTIONS                             */
/* ***************************************** */

/**
 * Loads a Media Asset
 *
 * @param $fid
 * @return StdClass
 */
function media_load($fid) {
  if ($files = entity_load('media', array($fid))) {
    return array_shift($files);
  }
}

/**
 * Save a Media Asset
 *
 * @param $media
 * @return StdClass
 */
function media_save($media) {
  field_attach_presave('media', $media);
  if ($media->fid) {
    $op = 'update';
  }
  else {
    $op = 'insert';
  }
  // Do something here for insert update
  if ($op == 'insert') {
    // should never happen I think, except perhaps on import.
    // @todo: validate bundle, etc
    field_attach_insert('media', $media);
  }
  else {
    field_attach_update('media', $media);
  }
}

/**
 * Access callback for media assets.
 */
function media_access($op) {
  return (user_access('administer media') || user_access($op . ' media'));
}

/**
 * Get all display types.
 */
function media_display_types() {
  $types = &drupal_static(__FUNCTION__);
  if (!$types) {
    $types = module_invoke_all('media_display_types');
    drupal_alter('media_display_types', $types);
  }
  return $types;
}


/* ***************************************** */
/* Callbacks                                 */
/* ***************************************** */

/**
 * Process callback for the media_browser element.
 *
 * @param $element
 * @param $edit
 * @param $form_state
 * @param $form
 * @return array
 */
function media_file_list_element_process($element, $edit, $form_state, $form) {
  $element['list'] = array(
    '#type'     => 'select',
    '#options'  => $element['#options'],
    '#size'     => variable_get('media_file_list_size', 10),
  );

  return $element;
}

if (!function_exists('file_uri_to_object')) {
  // @todo: get this committed http://drupal.org/node/685818

  /**
   * Returns a file object which can be passed to file_save().
   *
   * @param $uri
   *  A string containing the URI, path, or filename.
   * @return
   *  A file object, or FALSE on error.
   */
  function file_uri_to_object($uri) {
    global $user;
    $uri = file_stream_wrapper_uri_normalize($uri);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = basename($uri);
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->filesize = filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->status = FILE_STATUS_PERMANENT;
    return $file;
  }
}

/**
 * Returns the files attached to administration pages.
 */
function media_attached_files() {
  $path = drupal_get_path('module', 'media');
  return array(
    'js' => array($path . '/javascript/media-admin.js'),
    'css' => array($path . '/css/media.css'),
  );
}


/**
 * Implement hook_library().
 */
function media_library() {
  $path = drupal_get_path('module','media');

  $common = array(
    'website' => 'http://drupal.org/project/media',
    'version' => '7.x',
  );

  $libraries['media_base'] = array(
    'title' => 'Media base',
    'js' => array(
      $path . '/javascript/media.core.js' => array('weight' => JS_LIBRARY - 5),
      $path . '/javascript/util/json2.js' => array('weight' => JS_LIBRARY),
      $path . '/javascript/util/ba-debug.min.js' => array('weight' => JS_LIBRARY),
    ),
    'css' => array(
      $path . '/css/media.css',
    ),
  );

  $libraries['media_browser'] = array(
    'title' => 'Media Browser popup libraries',
    'js' => array(
      $path . '/javascript/media.popups.js' => array('weight' => JS_DEFAULT),
    ),
    'dependencies' => array(
      array('media', 'media_base'),
      array('system', 'ui.resizable'),
      array('system', 'ui.draggable'),
      array('system', 'ui.dialog'),
    ),
  );

  $libraries['media_browser_page'] = array(
    'title' => 'Media browser',
    'js' => array(
      $path . '/javascript/media-browser.js'  => array('weight' => JS_DEFAULT),
    ),
    'css' => array(
      $path . '/css/media.browser.css' => array('weight' => CSS_DEFAULT),
    ),
    'dependencies' => array(
      array('media', 'media_base'),
      array('system', 'ui.tabs'),
      array('system', 'ui.draggable'),
      array('system', 'ui.dialog'),
    ),
  );
  foreach ($libraries as &$library) {
    $library += $common;
  }
  return $libraries;
}

/**
 * Theme callback used to identify when we are in a popup dialog
 * @return unknown_type
 */
function media_dialog_get_theme_name() {
  // Set to empty to get the default theme.
  return variable_get('media_dialog_get_theme_name', 'seven');
}

/**
 *  A wrapper around simplexml to retrieve a given XML file.
 *
 *  @param $url
 *    The URL to the XML to retrieve.
 *  @param $display_errors
 *    Optional; if TRUE, then we'll display errors to the end user. They'll be
 *    logged to the watchdog in any case.
 *  @param $refresh
 *    Optional; if TRUE, then we'll force a new load of the XML. Otherwise,
 *    a cached version will be retrieved if possible.
 *  @return
 *    A fully populated object, or FALSE on an error.
 */
function media_retrieve_xml($url, $display_errors = FALSE, $refresh = FALSE) {
  module_load_include('inc', 'media', 'media.xml');
  return _media_retrieve_xml($url, $display_errors, $refresh);
}

/**
 *  This will parse the url or embedded code pasted by the node submitter.
 *
 *  @param string $url
 *    The original URL or embed code to parse.
 *  @param array $options
 *    An optional associative array. Currently:
 *      'form_field' => The field from FAPI when being validated, suitable for
 *        form_set_error(). If this is set, then a particular implementation
 *        may set the error if it believes the URL to be malformed.
 *  @return
 *    The unique URI for the file, based on its stream wrapper, or NULL.
 */
function media_parse($url, $options = array()) {
  foreach (module_implements('media_parse') as $module) {
    $success = module_invoke($module, 'media_parse', $url, $options);

    if ($success) {
      return $success;
    }
  }
}

<?php
// $Id$

/**
 * @file
 * Media API
 *
 * The core Media API.
 * The Media module provides a drop-in replacement for Drupal's Upload,
 * FileField, Embedded Media Field, and other similar forms. It offers an API
 * and hooks available for other modules to implement, allowing for customized
 * file lists, tabs, drawers, and forms to the new Upload form.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

include_once('media.types.inc');
include_once('media.fields.inc');
include_once('media.filter.inc'); // Code related to [[inline tags]] and wysiwyg

/* ***************************************** */
/* CONSTANTS                                 */
/* ***************************************** */

define('MEDIA_RESOURCE_URI_DEFAULT', 'public://');
define('MEDIA_TYPES_DEFAULT', '*');


/* ***************************************** */
/* Hook Implementations                      */
/* ***************************************** */

/**
 * Implement of hook_menu().
 */
function media_menu() {
  // For managing different types of media and the fields associated with them.
  $items['admin/structure/media'] = array(
    'title' => 'Media Types',
    'description' => 'Manage files used on your site.',
    'page callback' => 'media_admin_type_list',
    'access arguments' => array('administer media'),
    'file' => 'media.admin.inc',
  );

  $items['admin/structure/media/manage/%media_type'] = array(
    'title' => 'Manage media',
    'description' => 'Manage files used on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin_type_manage_form', 4),
    'access arguments' => array('administer media'),
    'type' => MENU_CALLBACK,
    'file' => 'media.admin.inc',
  );

  $items['admin/structure/media/manage/%media_type/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/content/media'] = array(
    'title' => 'Media',
    'description' => 'Manage files used on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'media.admin.inc',
  );

  $items['admin/content/media/add/files'] = array(
    'title' => 'Upload new file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_add_files'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media.admin.inc',
    'weight' => -1,
  );

  $items['admin/content/media/add/from_url'] = array(
    'title' => 'Add media from URL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_add_fromurl'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media.admin.inc',
    'weight' => -1,
  );

  $items['media/browser'] = array(
    'title' => 'Media browser',
    'description' => 'Media Browser for picking media and uploading new media',
    'page callback' => 'media_browser',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'weight' => 3,
    'type' => MENU_CALLBACK,
    'file' => 'media.admin.inc',
  );

  $items['media/browser/list'] = array(
    'title' => 'Media browser list',
    'description' => 'Ajax Callback for getting media',
    'page callback' => 'media_browser_list',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'weight' => 3,
    'type' => MENU_CALLBACK,
    'file' => 'media.admin.inc',
  );

  $items['media/browser/library'] = array(
    'title' => 'Media browser library',
    'description' => 'Media Browser for picking media and uploading new media',
    'page callback' => 'media_browser_library',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'weight' => 3,
    'type' => MENU_CALLBACK,
    'file' => 'media.admin.inc',
  );

  // @TODO: make this more like node?  (End user facing)
  $items['media'] = array(
    'title' => 'Media',
    'page callback' => 'media_page_default',
    'access arguments' => array('view media'),
    'type' => MENU_CALLBACK,
  );

  $items['media/%media'] = array(
    'page callback' => 'media_file_view',
    'page arguments' => array(1),
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'file' => 'media.pages.inc',
  );

  $items['media/%media/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['media/%media/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'media_page_edit',
    'page arguments'  => array(1),
    'access callback' => 'media_access',
    'access arguments' => array('edit'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'media.admin.inc',
    'file' => 'media.pages.inc',
  );

  $items['media/%media/format-form'] = array(
    'title' => 'Format form',
    'description' => 'Used as an AJAX callback',
    'page callback' => 'media_browser_format',
    'page arguments' => array(1),
    'access arguments' => array('administer media'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    'file' => 'media.admin.inc',
  );

  return $items;
}

/**
 * Implement hook_permission().
 */
function media_permission() {
  return array(
    'administer media' => array(
      'title' => t('Administer media'),
      'description' => t('Add, edit or delete media.'),
    ),
    'view media' => array(
      'title' => t('View media'),
      'description' => t('View media.'), // @TODO better description
    ),
    'edit media' => array(
      'title' => t('Edit media'),
      'description' => t('Edit media.'), // @TODO better description
    ),
  );
}

/**
 * Implement hook_theme().
 */
function media_theme() {
  return array(
    'media_managed_file' => array(
      'render element' => 'element',
    ),

    // The media file browser form.
    'media_file_browser' => array(
      'variables' => array('element' => NULL),
    ),

    // The default media file list form element.
    'media_file_list' => array(
      'variables' => array('element' => NULL),
    ),

    // The media browser pane.
    'media_browser_pane' => array(
      'variables' => array('form' => array()),
    ),

    // A link for a file w/ an icon to the media/$fid page.
    'media_link' => array(
      'variables' => array('file' => NULL),
      'file' => 'media.theme.inc',
    ),

    // A preview of the uploaded file.
    'media_admin_thumbnail' => array(
      'variables' => array('file' => NULL, 'style_name' => 'thumbnail'),
      'file' => 'media.theme.inc',
    ),

    // Administrative thumbnail previews.
    'media_admin_thumbnail' => array(
      'variables' => array('files' => array(), 'style_name' => 'thumbnail'),
      'file' => 'media.theme.inc',
    ),

    // Tabs in the media browser.
    'media_browser_tabs' => array(
      'file' => 'media.theme.inc',
    ),

    // Dialoge page.
    'media_dialog_page' => array(
      'render element' => 'page',
      'template' => 'media-dialog-page',
    ),
  );
}

/**
 * Implement of hook_media_elements().
 * 
 * A Media File List element is created with the following FAPI:
 *   '#type' => 'media_file_list',
 *   '#options' => $options,         // An associative array of filepaths, keyed by FID.
 *   '#title' => $title,             // The translated title, displayed in the tab.
 *   '#description' => $description, // A translated description, to be displayed below the title.
 */
function media_elements() {
  $elements = array();

  $elements['media_file_list'] = array(
    '#input'            => TRUE,
    '#process'          => array('media_file_list_element_process'),
    '#element_validate' => array('media_file_list_element_validate'),
    '#submit'           => array('media_file_list_element_submit'),
  );

  return $elements;
}


/**
 * Implement hook_image_default_styles().
 */
function media_image_default_styles() {
  $styles = array();
  $styles['square_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 180, 'height' => 180),
        'weight' => 0,
      ),
    )
  );
  return $styles;
}

/**
 * Implement hook_file_insert().
 */
function media_file_insert(&$file) {
  $file->type = media_get_type($file);
  drupal_write_record('file', $file, array('fid'));
}

/**
 * Implement hook_file_update().
 */
function media_file_update(&$file) {
  media_file_insert($file);
}

/**
 * Implement hook_page_alter().
 */
function media_page_alter(&$page) {
  if (isset($_GET['render']) && $_GET['render'] == 'media-browser') {
    $page['#theme'] = 'media_dialog_page';
    foreach (element_children($page) as $key) {
      if ($key != 'content') {
        unset($page[$key]);
      }
    }
  }
}

/**
 * Implement of hook_form_alter().
 * We assign a form #after_build processing callback that is executed
 * on all forms after they have been completely built, so that we can
 * take the content of the textarea to inject our tagMap in Drupal.settings
 * to access on node/edit/<nid> or block/configure forms.
 *
 * @see media_process_form()
 */

function media_form_alter(&$form, &$form_state) {
  $form['#after_build'][] = 'media_process_form';
}

/**
 * Implement hook_media_display_types().
 * Different display types (list/thumbnails/etc).
 */
function media_media_display_types() {
  $path = drupal_get_path('module', 'media');
  $display_types = array();

  $display_types['list'] = array(
    'title' => t('List'),
    'description' => t('Display as a list.'),
    'icon' => $path . '/images/display-list.png',
    'icon_active' => $path . '/images/display-list-active.png',
    'callback' => 'media_admin_list',
    'file' => drupal_get_path('module', 'media') . '/media.admin.inc',
  );

  $display_types['thumbnails'] = array(
    'title' => t('Thumbnails'),
    'description' => t('Display as thumbnails.'),
    'icon' => $path . '/images/display-thumbnails.png',
    'icon_active' => $path . '/images/display-thumbnails-active.png',
    'callback' => 'media_admin_thumbnails',
    'file' => drupal_get_path('module', 'media') . '/media.admin.inc',
  );

  return $display_types;
}

/**
 * Implement hook_media_operations().
 * @todo: shouldn't this be using actions or something?
 */
function media_media_operations() {
  $operations = array(
    'delete' => array(
      'label' => t('Delete'),
      'callback' => NULL,
    ),
  );
  return $operations;
}

/* ***************************************** */
/* API FUNCTIONS                             */
/* ***************************************** */

/**
 * Loads a Media Asset
 *
 * @param $fid
 * @return StdClass
 */
function media_load($fid) {
  if ($files = entity_load('media', array($fid))) {
    return array_shift($files);
  }
}

/**
 * Save a Media Asset
 *
 * @param $media
 * @return StdClass
 */
function media_save($media) {
  field_attach_presave('media', $media);
  if ($media->fid) {
    $op = 'update';
  }
  else {
    $op = 'insert';
  }
  // Do something here for insert update
  if ($op == 'insert') {
    // should never happen I think, except perhaps on import.
    // @todo: validate bundle, etc
    field_attach_insert('media', $media);
  }
  else {
    field_attach_update('media', $media);
  }
}

/**
 * Access callback for media assets.
 */
function media_access($op) {
  return (user_access('administer media') || user_access($op . ' media'));
}

/**
 * Get all display types.
 */
function media_display_types() {
  $types = &drupal_static(__FUNCTION__);
  if (!$types) {
    $types = module_invoke_all('media_display_types');
    drupal_alter('media_display_types', $types);
  }
  return $types;
}


/* ***************************************** */
/* Callbacks                                 */
/* ***************************************** */

/**
 * Process callback for the media_browser element.
 *
 * @param $element
 * @param $edit
 * @param $form_state
 * @param $form
 * @return array
 */
function media_file_list_element_process($element, $edit, $form_state, $form) {
  $element['list'] = array(
    '#type'     => 'select',
    '#options'  => $element['#options'],
    '#size'     => variable_get('media_file_list_size', 10),
  );

  return $element;
}

if (!function_exists('file_uri_to_object')) {
  // @todo: get this committed http://drupal.org/node/685818

  /**
   * Returns a file object which can be passed to file_save().
   *
   * @param $uri
   *  A string containing the URI, path, or filename.
   * @return
   *  A file object, or FALSE on error.
   */
  function file_uri_to_object($uri) {
    global $user;
    $uri = file_stream_wrapper_uri_normalize($uri);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = basename($uri);
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->filesize = filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->status = FILE_STATUS_PERMANENT;
    return $file;
  }
}

/**
 * Returns the files attached to administration pages.
 */
function media_attached_files() {
  $path = drupal_get_path('module', 'media');
  return array(
    'js' => array($path . '/javascript/media-admin.js'),
    'css' => array($path . '/media.css'),
  );
}

<?php
// $Id$

/**
 * @file
 * Media API
 *
 * The core Media API.
 * The Media module provides a drop-in replacement for Drupal's Upload,
 * FileField, Embedded Media Field, and other similar forms. It offers an API
 * and hooks available for other modules to implement, allowing for customized
 * file lists, tabs, drawers, and forms to the new Upload form.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

include_once('media_types.inc');
include_once('media.fields.inc');

/* ***************************************** */
/* CONSTANTS                                 */
/* ***************************************** */

define('MEDIA_RESOURCE_URI_DEFAULT', 'public://');
define('MEDIA_TYPES_DEFAULT', '*');

/* ***************************************** */
/* DRUPAL API FUNCTIONS                      */
/* ***************************************** */

/**
 * Implementation of hook_menu().
 */
function media_menu() {
  // AJAX formatter. This page is used to create the formatter form
  // when adding a new file, after selecting a file and pressing 'Add'.
  $items['media/js'] = array(
    'page callback'    => 'media_ahah_formatter_load',
    'access arguments' => array('access content'),
  );
  $items['media/metadata/js'] = array(
    'page callback'    => 'media_ahah_metadata_ahah',
    'access arguments' => array('access content'),
  );

  // For managing different types of media and the fields associated with them.
  $items['admin/structure/media'] = array(
    'title' => 'Media Types',
    'description' => 'Manage files used on your site.',
    'page callback' => 'media_admin_type_list',
    'access arguments' => array('administer media'),
    'file' => 'media.admin.inc',
  );
  $items['admin/structure/media/manage/%media_type'] = array(
    'title' => 'Manage media',
    'description' => 'Manage files used on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin_type_manage_form', 4),
    'access arguments' => array('administer media'),
    'type' => MENU_CALLBACK,
    'file' => 'media.admin.inc',
  );

  // Admin settings
  $items['admin/content/media'] = array(
    'title' => 'Media',
    'description' => 'Manage files used on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'media.admin.inc',
  );

  $items['admin/content/media/%media/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_edit', 3),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'media.admin.inc',
  );

  $items['admin/content/media/add/files'] = array(
    'title' => 'Upload new files',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_add_files'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media.admin.inc',
    'weight' => -1,
  );
  /*
  $items['admin/content/media/add/folder'] = array(
    'title' => 'Add new folder',
    'page callback' => 'media_add_folder',
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media.admin.inc',
    'weight' => 20,
  );
  */

  // Default settings, for content types that do not have their own.
  $items['admin/settings/media'] = array(
    'title'            => 'Media settings',
    'description'      => 'Configure Global Media settings, including default content type settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('media_settings_global'),
    'access arguments' => array('administer media'),
    'weight'           => 3,
  );

  $items['media/browser'] = array(
    'title'            => 'Media browser',
    'description'      => 'Media Browser for picking media and uploading new media',
    'page callback'    => 'media_browser',
    'access arguments' => array('use media browser'),
    'weight'           => 3,
    'type'             => MENU_CALLBACK,
    'file'             => 'media.admin.inc',
  );

  $items['media/browser/list'] = array(
    'title'            => 'Media browser list',
    'description'      => 'Ajax Callback for getting media',
    'page callback'    => 'media_browser_list',
    'access arguments' => array('use media browser'),
    'weight'           => 3,
    'type'             => MENU_CALLBACK,
    'file'             => 'media.admin.inc',
  );

  //@todo: make this more like node?  (End user facing)

  $items['media'] = array(
    'title' => 'Media',
    'page callback' => 'media_page_default',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['media/%media'] = array(
    'title'           => 'Media view',
    'description'     => '',
    'page callback'   => 'media_file_view',
    'page arguments'  => array(1),
    'access arguments' => array('access content'), //array('view media'),
    'type' => MENU_CALLBACK,
  );

  $items['media/%media/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['media/%media/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'media_page_edit',
    'page arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  /**
   * Ajax callback to handle viewing an individual piece of media.
   */
  $items['media/%media/print'] = array(
    'title' => 'Media view callback',
    'page callback' => 'media_print',
    'page_arguments' => array(1, 3),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function media_load($fid) {
  if ($files = entity_load('media', array($fid))) {
    return array_shift($files);
  }
}

function media_save($media) {
  field_attach_presave('media', $media);
  if ($media->fid) {
    $op = 'update';
  } else {
    $op = 'insert';
  }
  // Do something here for insert update
  //drupal_write_record('files', $media);
  if ($op == 'insert') {
    // should never happen I think, except on import.
    // @todo: validate bundle, etc
    field_attach_insert('media', $media);
  }
  else {
    field_attach_update('media', $media);
  }
}

/**
 * Implement hook_permission().
 */
function media_permission() {
  return array(
    'administer media' => array(
      'title' => t('Administer media'),
      'description' => t('Add, edit or delete media.'),
    ),
  );
}

/**
 * Implements hook_theme().
 * Register theming functions
 * @todo: remove cruft
 *
 * @return array
 */
function media_theme() {
  return array(
    'media_managed_file' => array(
      'render element' => 'element',
    ),

    // The media file browser form.
    'media_file_browser' => array(
      'variables'          => array('element' => NULL),
    ),

    // The default media file list form element.
    'media_file_list' => array(
      'variables'       => array('element' => NULL),
    ),

    // The media browser pane.
    'media_browser_pane' => array(
      'variables'         => array('form' => array()),
    ),

    // A link for a file w/ an icon to the media/$fid page.
    'media_link' => array(
      'variables'         => array('file' => NULL),
      'file'              => 'media_theme.inc',
    ),

    // A preview of the uploaded file.
    'media_admin_thumbnail' => array(
      'variables' => array('file' => NULL, 'style_name' => 'thumbnail'),
      'file' => 'media_theme.inc',
    ),

    // Administrative thumbnail previews.
    'media_admin_thumbnail' => array(
      'variables' => array('files' => array(), 'style_name' => 'thumbnail'),
      'file' => 'media_theme.inc',
    ),
  );
}

/* *************************************************** */
/* Media forms                                         */
/* *************************************************** */

/**
 * Build data for the media browser display.
 *
 * @TODO Clean this form up and use a form theme function.
 *
 * Note: The FAPI docs say a submit element event defaults to 'click',
 * but as of d6.10, it defaults to 'mousedown', so we need to override.
 *   'event' => 'click',
 *
 * @param array $registration_ids
 *   Array of registrations to call.
 * @param string $node_type
 * @param string $field
 * @param uid $uid
 * @return array
 *   Drupal FAPI form array.
 */
function media_build_browser_form($form_state, $registration_ids, $node_type, $field, $uid) {
  static $id;

  // We need a static counter for our form element wrapper.
  $id += 1;

  // Load our css.
  $path = drupal_get_path('module', 'media');
  drupal_add_css($path .'/media.css');
  // Load our specific js for the file selector
  drupal_add_js($path .'/javascript/media.js');
  // Load the md5 library so we can hash the upload filename for use in the meta form.
  drupal_add_js($path .'/javascript/jquery.md5.js');

  $items = array();
  $form  = array();

  $form['media_browser_activate'] = array(
    '#type'  => 'markup',
    '#value' => '<div class="media browser activation">'. t('Add files') .'</div>',
  );

  // We are using a tab form type.
  $form['media_browser'] = array(
    '#type'       => 'tabset',
    '#attributes' => array('class' => 'media browser wrapper'),
  );

  // Get all the active resources
  $resources = media_get_resources($registration_ids, $node_type, $field, $uid);

  // Store the tab & drawer names for the js form selector.
  $drawer_options = array();

  // loop through the form and start pulling out the data to
  // create tabs -> panes -> drawers
  foreach ($resources as $tab_name => $data) {
    // create a tab id
    $tab_id = strtolower(str_replace(' ', '_', $tab_name));
    // create tab
    $form['media_browser'][$tab_id] = array(
      '#type'  => 'tabpage',
      '#title' => $tab_name,
      '#theme' => 'media_browser_pane',
    );

    $drawer_options[$tab_id] = $tab_name;

    // build the drawers for this tab
    $drawer_list   = array();
    $active_drawer = TRUE;

    // check to see if we do have children- we should, but just in case
    if (is_array($data)) {
      $drawers = array();

      foreach ($data as $drawer_name => $drawer_data) {
        // @TODO check drawer access permissions here to make sure we should present this to the user

        // The drawer id needs to have additional data on it to prevent
        // name space conflicts with ids
        $drawer_id = strtolower(str_replace(' ', '_', $drawer_name)) .'_display';

        // create a link with a specific id to call
        $drawers_link  = '<a onclick="javascript: return FALSE;" href="#'. $drawer_id .'">'. $drawer_name .'</a>';
        $drawer_list[] = array('data' => $drawers_link, 'class' =>  ($active_drawer ? 'active' : '') );

        // add the drawer form element
        $form['media_browser'][$tab_id][$drawer_name] = $drawer_data;

        // add classes to the drawer display item
        $form['media_browser'][$tab_id][$drawer_name]['#prefix'] = '<div id="'. $drawer_id .'" class="drawer display '. ($active_drawer ? ' active' : NULL) .'">';
        $form['media_browser'][$tab_id][$drawer_name]['#suffix'] = '</div>';

        // no longer on the first drawer
        $active_drawer = FALSE;

        $drawer_options[$tab_id .'|'. $drawer_id] = '- '. $drawer_name;
      }

      // change the drawers to a list for easer display
      $form['media_browser'][$tab_id]['drawers'] = array(
        '#type'  => 'markup',
        '#value' => theme('item_list', $drawer_list, NULL, 'ul', array('class' => 'drawers'))
      );

    }
  }

  $form['media_browser']['drawer_select'] = array(
    '#type'        => 'select',
    '#title'       => t('Drawer select'),
    '#description' => t('Oh bother, you really should have JavaScript enabled, you know...'),
    '#options'     => $drawer_options,
    '#prefix'      => '<div class="media-browser-drawer-select">',
    '#suffix'      => '</div>',
  );

  // Container for the progress indicator.
  $form['media_browser']['media_browser_file_progress'] = array(
    '#prefix' => '<div id="media-browser-file-progress-'. $id .'" class="media-browser-file-progress">',
    '#suffix' => '</div>',
  );
  $form['media_browser']['media_browser_file_progress']['file_progress_message'] = array(
    '#type'  => 'item',
    '#title' => theme('image', variable_get('media_file_progress_image', $path .'/images/uploading-gradient.gif')) . t('Please wait while your file is attached...'),
  );

  // AHAH enabled submit button.
  $form['media_browser']['media_browser_submit'] = array(
    '#type'        => 'submit',
    '#value'       => t('Add file'),
    '#description' => t("Add the selected file."),
    '#submit'      => array('media_browser_submit'), // If no javascript action.
    '#validate'    => array('media_browser_validate'),
    '#attributes'  => array('class' => 'media-browser-submit'),
    '#ahah'        => array(
      'path'         => 'media/js',
      'wrapper'      => 'media-browser-file-progress-'. $id,
      'method'       => 'replace',
      'effect'       => 'fade',
      'event'        => 'click',
    ),
  );

  // Container for the metadata submission message.
  $form['media_browser']['media_browser_metadata_message'] = array(
    '#prefix' => '<div id="media-browser-metadata-message-'. $id .'" class="media-browser-metadata-message">',
    '#suffix' => '</div>',
  );
  $form['media_browser']['media_browser_metadata_message']['message'] = array(
    '#type'  => 'item',
    '#value' => '',
  );

  $form['media_browser']['media_browser_metadata'] = array(
    '#type'       => 'tabset',
    '#attributes' => array('class' => 'media-browser-metadata-wrapper'),
  );

  // @TODO: This all goes in the form creation, actually,
  // to create our metadata form...
//   $uri = $form_state['values']['media_files'];
//   $file_extension = pathinfo($uri, PATHINFO_EXTENSION);
//
//   // Get the file creator for this item.
//   $file_creator = media_get_registered_modules(array($registration_id));
//
//   // Get the formaters for this node type.
//   $formatters = media_active_fields_for_node_type($node_type, 'formatter');
//
//   // Get the registrations.
//   $registrations = media_get_registered_modules($formatters[$field]);
//
//   // Remove any non-applying registrations.
//   $registrations = media_get_applicable_formatters($registrations, $file_extension);
//
//   // Get all the formatting forms.
//   $formatter_options = array();
//   $forms = array();
//   foreach ($registrations as $id => $registration) {
//     $formatter_options[$id] = $registration['name'];
//     $function = $registration['callbacks']['form'];
//     if (function_exists($function)) {
//       $forms[$id] = $function($node_type, $field, $file_extension, $uri);
//     }
//   }

  // @TODO: This is placeholder only.
  foreach (array('Video', 'Image', 'Audio', 'PDF') as $mime_type) {
    $form['media_browser']['media_browser_metadata'][$mime_type] = array(
      '#type'  => 'tabpage',
      '#title' => $mime_type,
    );
    $form['media_browser']['media_browser_metadata'][$mime_type][$mime_type .'_title'] = array(
      '#type'  => 'textfield',
      '#title' => t('Title'),
    );
  }

  // Our AHAH enabled submit button for the metadata.
  $form['media_browser']['media_browser_metadata_submit'] = array(
    '#type'        => 'submit',
    '#value'       => t('Add metadata'),
    '#description' => t("Add the selected file."),
    '#submit'      => array('media_browser_metadata_submit'), // If no javascript action.
    '#validate'    => array('media_browser_metadata_validate'),
    '#attributes'  => array('class' => 'media-browser-metadata-submit'),
    '#ahah'        => array(
      'path'         => 'media/metadata/js',
      'wrapper'      => 'media-browser-metadata-message-'. $id,
      'method'       => 'replace',
      'effect'       => 'fade',
      'event'        => 'click',
    ),
  );

  // build the tabs into a single form element
  // @TODO make sure we have children for each tab and remove any that
  //       we don't have data for
  $form['tabs'] = array(
    '#type'  => 'markup',
    '#value' => theme('item_list', $tabs, NULL, 'ul', array('class' => 'tabs')),
  );

  return $form;
}

/**
 * Display files in a form element.
 *
 * This is a generic for other modules to make use of.
 *
 * @param array $files
 *   array of (uri => uri, filename => filename, meta => array(key => value))
 * @param string $title
 *   option title argument
 * @return array
 *   Form array containing a select list populated with files.
 */
function media_resource_display_user_files_form($files, $title = NULL) {
  // Pass files into options array.
  $options = array();

  foreach ($files as $file) {
    // TODO: Use FID rather than URI
    $options[$file['uri']] = $file['filename'];
  }

  // Parse files into form element.
  $form['media_files'] = array(
    '#type'       => 'select',
    '#options'    => $options,
    '#title'      => $title ? $title : '',
    '#attributes' => array('class' => 'resource select'),
    '#size'       => variable_get('media_file_list_size', 10),
  );

  return $form;
}

/**
 * Display the upload form for the tab.
 *
 * @return array
 *   Form array containing a file field.
 */
function media_resource_display_upload_form() {
  $form['media_upload']['upload'] = array(
    '#type'       => 'file',
    '#title'      => t('Upload your file'),
    '#size'       => 30,
    '#attributes' => array('class' => 'resource select'),
  );

  return $form;
}

/* ***************************************** */
/* Media Hook Implementations                */
/* ***************************************** */

/**
 *  Implementation of hook_media_elements().
 *
 *  A Media File List element is created with the following FAPI:
 *    '#type' => 'media_file_list',
 *    '#options' => $options,         // An associative array of filepaths, keyed by FID.
 *    '#title' => $title,             // The translated title, displayed in the tab.
 *    '#description' => $description, // A translated description, to be displayed below the title.
 */
function media_elements() {
  $elements = array();

  $elements['media_file_list'] = array(
    '#input'            => TRUE,
    '#process'          => array('media_file_list_element_process'),
    '#element_validate' => array('media_file_list_element_validate'),
    '#submit'           => array('media_file_list_element_submit'),
  );

  return $elements;
}

/* ***************************************** */
/* Callbacks                                 */
/* ***************************************** */

/**
 * Process callback for the media_browser element.
 *
 * @param $element
 * @param $edit
 * @param $form_state
 * @param $form
 * @return array
 */
function media_file_list_element_process($element, $edit, $form_state, $form) {
  $element['list'] = array(
    '#type'     => 'select',
    '#options'  => $element['#options'],
    '#size'     => variable_get('media_file_list_size', 10),
  );

  return $element;
}

/**
 *  Add the media browser jQuery files and all required libraries.
 *
 *  @param array &$element
 *    The element to add the attached libraries.
 */
function media_attach_browser(&$element) {
  static $attached;
  if ($attached) {
    return;
  }
  $attached = TRUE;
  $path = drupal_get_path('module', 'media');

  $element['#attached'] = isset($element['#attached']) ? $element['#attached'] : array();

  // Use the currently undocumented #attached property to load js & css.
  $element['#attached'] += array(
    'library' => array(
      array('system', 'vertical-tabs'),
      array('system', 'ui'),
      array('system', 'ui.draggable'),
      array('system', 'ui.resizable'),
      array('system', 'ui.dialog'),
      array('system', 'ui.tabs'),
    ),
    'js' => array(
      // Load the jQuery Plugin to launch / configure it.
      $path . '/javascript/media.jquery.js',
      // A debugging library.
      $path . '/javascript/util/ba-debug.min.js',
      // Load the custom JS to bind elements and handle fields.
      $path . '/javascript/media.js',
    ),
    'css' => array(
      $path . '/media.css',
    ),
  );

  $settings = array(
    'browserUrl' => url('media/browser'),
    // @Todo: rip this down and make a callback API structure with tokens, etc
    // this is temporary.
  );
  // @TODO This can technically be done w/ #attached as well, with a callback.
  drupal_add_js(array('media' => $settings), 'setting');

  //@todo: re-integrate the code below
  return;


  // @TODO: This is a hack to get the Media: YouTube js attached to the form.
  // I wasn't able to get the #attached property to be respected during AJAX;
  // it may not be possible. I suppose we can alter the form; this is just to
  // see if it works at all. - aaron
  if (module_exists('media_youtube')) {
    drupal_add_js(array('mediaYoutube' => array('parse_url' => url('media-youtube/parse'))), 'setting');
    drupal_add_js(drupal_get_path('module', 'media_youtube') . '/js/media_youtube.js');
  }

  $i = false;
  // Fetch all defined tabs
  //foreach (media_get_registered_modules_get_tabs() as $tab_machine => $tabname) {
  foreach (array('onething' => "One thing", 'otherthing' => "other Thing") as $tab_machine => $tabname) {
//    $options = array('attributes' => array(
//      'class' => ($i ? null : 'active'),
//      'tabname' => $tab_machine,
//      'field-name' => $element['#field_name'],
//      'bundle' => $element['#bundle'],
//      'object-type' => $element['#object_type']
//    ));
    $options = array();

    $items[] = array(
      'data' => l($tabname, '#', $options),
      'class' => $i ? null : array('active'),
    );
    $i = true;
  }


  // Add a URL setting for the AJAX load
  drupal_add_js(array('media' => array(
    'media_browser_content_load_url' => base_path() . 'media/browser/dispatch',
    'media_browser_tabs' => theme('item_list', array('items' => $items, 'attributes' => array('class' => 'tabs primary', 'onclick' => 'javascript: return false;')))
  )),
  array('type' => 'setting'));
}

/**
 * Implement hook_image_default_styles().
 */
function media_image_default_styles() {
  $styles = array();
  $styles['square_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 180, 'height' => 180),
        'weight' => 0,
      ),
    )
  );

  return $styles;
}

/**
 * Menu callback; view a single piece of media.
 * @todo: this.
 */
function media_file_view($media) {
  drupal_set_title($media->filename);
  $ret = media_build_multiple(array($media->fid => $media), 'media_original');
  return $ret;
}

/**
 * Construct a drupal_render() style array from an array of loaded media files.
 *
 * @param $files
 *   An array of nodes as returned by node_load_multiple().
 * @param $view_mode
 *   Build mode, e.g. 'full', 'teaser'...
 * @param $weight
 *   An integer representing the weight of the first file in the list.
 * @return
 *   An array in the format expected by drupal_render().
 */
function media_build_multiple($files, $view_mode = 'media_original', $weight = 0) {
  field_attach_prepare_view('media', $files, $view_mode);
  $build = array();
  foreach ($files as $file) {
    $build['media'][$file->fid] = field_attach_view('media', $file, $view_mode);
    $build['media'][$file->fid]['#weight'] = $weight;
    $weight++;
  }
  $build['media']['#sorted'] = TRUE;

  return $build;
}

/* *************************************************** */
/* Media display forms                                 */
/* *************************************************** */

/**
 * Creates the file list display form
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param $files
 *   array of Drupal file objects
 * @param $parameters
 *   array of current display settings
 * @return array drupal form
 *
 */
function media_file_listing_form($form, $form_state, $files, $parameters) {
  $form['files'] = array(
   '#tree' => TRUE,
   '#prefix' => '<div class ="media-display-thumbnails clearfix">',
   '#suffix' => '</div>',
  );
  if (count($files)) {
    foreach ($files as $id => $file) {
     $form['files'][$id] = array(
       '#type' => 'checkbox',
       '#return_value' => $file->uri,
       '#title' => check_plain($file->filename),
       '#prefix' => '<div class="media-thumbnail">' . theme('media_browser_thumbnails', array('file' => $file)),
       '#suffix' => '</div>',
     );
    }
  }

  // Unset the page value in options so that the pager can
  // control which page the link refers to
  unset($parameters['page']);
  $form['pager'] = array('#markup' => theme('pager', array('parameters' => $parameters)));

  // Build the display switch.
  // @TODO support this correctly
  // require_once('media.admin.inc');
  // $form = media_admin_display_switch($form, array('active_display' => 'thumbnails'));
  return $form;
}

/**
 * Implement hook_file_insert();
 */
function media_file_insert(&$file) {
  media_add_type_to_file($file);
}

/**
 * Implement hook_file_update();
 */
function media_file_update(&$file) {
  media_add_type_to_file($file);
}

/**
 * Adds the media type field to the files table.
 *
 * This currently depends on the mimetype of the file.
 *
 * @param unknown_type $file
 * @return unknown_type
 */
function media_add_type_to_file($file) {
  $file->type = media_get_type($file);
  drupal_write_record('file', $file, array('fid'));
}

function media_page_alter(&$page) {
  // This sucks, no way to remove the header in garland. :(
  // @todo: this needs to be a template

  if (!isset($page['content']['system_main']['media_browser'])) {
    return;
  }
  foreach (element_children($page) as $element_name) {
    if ($element_name != 'content') {
      unset($page[$element_name]);
    }
  }
}

/**
 * @TODO can somebody document this?
 *
 * @param unknown_type $variables
 * @return unknown
 */
function theme_media_managed_file($variables) {
  $element = $variables['element'];
  // This wrapper is required to apply JS behaviors and CSS styling.
  $output = '';
  $output .= '<div class="form-media-file">';
  $output .= drupal_render_children($element);
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_wysiwyg_include_directory()
 */

function media_wysiwyg_include_directory($type) {
  switch($type) {
    case 'plugins':
      return $type;
        break;
    }
}

function media_filter_info() {
  $filters['media_filter'] = array(
    'title' => t('Converts Media tags to Markup'),
    'description' => t('This filter will convert [[{type:media... ]] tags into markup'),
    'process callback' => 'media_filter',
    'tips callback' => 'media_filter_tips', // @TODO not implemented
    'cache' => FALSE,
  );
  return $filters;
}

// @TODO check for security probably pass text through filter_xss
function media_filter($text,$filter) {
    $text = ' ' . $text . ' '; 
    $text = preg_replace_callback("/\[\[.*?]]/s",'_media_markup',$text);
    return $text;
}

// Replace callback to convert tag into markup
function _media_markup($match) {
  $match = str_replace("[[","",$match);  
  $match = str_replace("]]","",$match);
  $media = drupal_json_decode($match[0]);
  $file = file_load($media['fid']);
  return theme('media_admin_thumbnail',array('file' => $file));       
}

/**
 * Implementation of hook_node_load()
 * This would ensure that tagmap is added to Drupal.settings on node/edit,
 * there could be a better way to do this.
 */

function media_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $text = $node->body[LANGUAGE_NONE][0]['value'];
    $tagmap = _media_generate_tagMap($text);     
  } 
  drupal_add_js(array('tagmap' => $tagmap),'setting');
}
  
function _media_generate_tagMap($text) {
  $tagmap = array();
  preg_match_all("/\[\[.*?]]/s",$text,$matches,PREG_SET_ORDER);
  foreach($matches as $match) {
    $tagmap[$match[0]] = _media_markup($match);
  }
  return $tagmap;
}

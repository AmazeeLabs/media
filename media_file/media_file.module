<?php
// $Id$

/**
 * @file
 * This module provides integration for Drupal's file module
 * with the Media module
 */


/**
 * Implementation of hook_media_register
 * @TODO please see notes in the hook for revising this
 *
 * @return array
 *   Form array items
*/
function media_file_media_register() {
  $items = array();

  // Register User files display
  $items['media_file_user_files'] = array(
    'tab' => 'My files',
    'subtab' => 'Files I have uploaded',
    // Do we need a name for this?
    'name' => 'User files',
    // Is a type necessary, or can we just exploit this
    // in the callbacks section?
    'kind' => 'resource',
    // Shouldn't this be a mimetype?
    'types'       => '*',
    'description'  => 'Displays all of current user\'s files.',
    'callbacks'   => array(
      'resource'    => 'media_file_user_files_select',
    ),
    // Won't this be define d in the widget
    // rather than here?
    'fields'      => array('file'),
  );

  // Register all uploaded files
  $items['media_file_all_uploaded_files'] = array(
    'tab' => 'Filesystem',
    'subtab' => 'All files uploaded',
    // Do we need a name for this?
    'name' => 'User files',
    // Is a type necessary, or can we just exploit this
    // in the callbacks section?
    'kind' => 'resource',
    // Shouldn't this be a mimetype?
    'types'       => '*',
    'description'  => 'Displays all uploaded files.',
    'callbacks'   => array(
      'resource'    => 'media_file_uploaded_files_select',
    ),
    // Won't this be define d in the widget
    // rather than here?
    'fields'      => array('file'),
  );

  // Register User files display
  $items['media_file_directory_files'] = array(
    'tab' => 'Filesystem',
    'subtab' => 'Files in a directory',
    'name' => 'Files in a directory',
    'kind'        => 'resource',
    'types'       => '*',
    'description'  => 'All files in a directory',
    'callbacks'   => array(
      'resource'    => 'media_file_filesystem_select',
    ),
    'fields'      => array('file'),
  );


  // Register Add/File file functionality
  $items['media_file_resource_add_file'] = array(
    'tab' => 'Upload a file',
    'subtab' => 'Upload a file',
    'name'        => 'Media File add file',
    'description' => t("Add new file using Drupal's File module"),
    'kind'        => 'resource',
    'callbacks'   => array(
      'resource'    => 'media_file_resource_add_file',
    ),
    'fields'      => array('file'),
  );

  // Register Embed file functionality
  $items['media_file_resource_embed_file'] = array(
    'name'        => 'Media File embed file',
    'description' => t("Embed file URI using Drupal's File module"),
    'uri'         => 'file',
    'kind'        => 'resource',
    'types'       => '*',
    'callbacks'   => array(
      'resource'    => 'media_file_resource_embed_file',
     ),
    'fields'      => array('file'),
  );

  // Register form formatter functionality
  $items['media_file_formatter_form'] = array(
    'name'        => 'Media File form formatter',
    'description' => "Media file form formatter",
    'kind'        => 'formatter',
    'callbacks'   => array(
      'formatter'        => 'media_file_formatter_form',
    ),
    'fields'      => array('file'),
    );

  // Register action functionality
  // @TODO: This may not be needed depending on our implementation of hook_media_action [see #480166]
  $items['media_file_action'] = array(
    'name'        => 'Media File action handler',
    'description' => t("Called to perform various actions such as attaching a file to a node"),
    'kind'        => 'action',
    'types'       => '*',
    'callbacks'   => array(
      'action'      => 'media_file_action',
     ),
    'fields'      => array('file'),
  );

  return $items;
}


/* ***************************************** */
/* Media Callbacks                           */
/* ***************************************** */


/**
 * Fetches all files associated with the current user
 * Provides standard file navigation system.
 *
 * @param $options
 *   array options which define current navigation states
 * @param $invoke
 *   boolean is the first invocation- add specific data that
 *   is required for additional ajax callbacks
 */
function media_file_user_files_select($parameters) {
	global $user;
  // Use a default value for limit
  if (!isset($parameters['limit']) ) {
    $parameters['limit'] = 10;
  }

  if (isset($parameters['object-type']) && isset($parameters['field-name']) && isset($parameters['bundle'])) {
    $instance = field_info_instance($parameters['object-type'], $parameters['field-name'], $parameters['bundle']);
    $field = field_info_field($parameters['field-name']);
  }

  if (empty($instance) || empty($field)) {
    // Invalid parameters.
    // @TODO another arthur hack to make things "work"
    // return;
  }
  $allowed_schemes = $instance['widget']['settings']['allowed_schemes'];
  $directory = $instance['settings']['file_directory'];
  $extensions = $instance['settings']['file_extensions'];
  $scheme = $field['settings']['uri_scheme'];

  // Get all files in the system
  $query =  db_select('file', 'f')->extend('PagerDefault');
  $query->fields('f', array('fid'));
  $query->condition('f.uid', $user->uid, '=');
  /*
      @TODO sorry peter, this was bombing things for me
            I need to figure out why my data coming back to
            you is not valid....

      $or = db_or();
      foreach ($allowed_schemes as $scheme) {
        $or->condition('f.uri', $scheme . '://%', 'LIKE');
      }
      $query->condition($or);*/
  // TODO: filter by mimetype.
  $fids = $query->limit($parameters['limit'])->execute()->fetchCol();
  // Now load all the files as objects
  $files = file_load_multiple($fids);
  return theme('media_browser_content_frame', array('files' => $files, 'parameters' => $parameters, 'invoke' => $invoke));
}


/**
 * Fetches all uploaded files
 * Provides standard file navigation system.
 *
 * @param $options
 *   array options which define current navigation states
 * @param $invoke
 *   boolean is the first invocation- add specific data that
 *   is required for additional ajax callbacks
 */
function media_file_uploaded_files_select($parameters) {
  // Use a default value for limit
  if (!isset($parameters['limit']) ) {
    $parameters['limit'] = 10;
  }

  if (isset($parameters['object-type']) && isset($parameters['field-name']) && isset($parameters['bundle'])) {
    $instance = field_info_instance($parameters['object-type'], $parameters['field-name'], $parameters['bundle']);
    $field = field_info_field($parameters['field-name']);
  }

  if (empty($instance) || empty($field)) {
    // Invalid parameters.
    // @TODO another arthur hack to make things "work"
    // return;
  }
  $allowed_schemes = $instance['widget']['settings']['allowed_schemes'];
  $directory = $instance['settings']['file_directory'];
  $extensions = $instance['settings']['file_extensions'];
  $scheme = $field['settings']['uri_scheme'];

  // Get all files in the system
  // TODO: allow this to use a View.
  $query =  db_select('file', 'f')->extend('PagerDefault');
  $query->fields('f', array('fid'));

  /*
      @TODO sorry peter, this was bombing things for me
            I need to figure out why my data coming back to
            you is not valid....

      $or = db_or();
      foreach ($allowed_schemes as $scheme) {
        $or->condition('f.uri', $scheme . '://%', 'LIKE');
      }
      $query->condition($or);*/
  // TODO: filter by mimetype.
  $fids = $query->limit($parameters['limit'])->execute()->fetchCol();
  // Now load all the files as objects
  $files = file_load_multiple($fids);
  return theme('media_browser_content_frame', array('files' => $files, 'parameters' => $parameters, 'invoke' => $invoke));
}

/**
 * Fetches all files on the file system
 * Provides standard file navigation system.
 *
 * @param $options
 *   array options which define current navigation states
 * @param $invoke
 *   boolean is the first invocation- add specific data that
 *   is required for additional ajax callbacks
 */
function media_file_filesystem_select($parameters) {
  // Use a default value for limit
  if (!isset($parameters['limit']) ) {
    $parameters['limit'] = 10;
  }

  if (isset($parameters['object-type']) && isset($parameters['field-name']) && isset($parameters['bundle'])) {
    $instance = field_info_instance($parameters['object-type'], $parameters['field-name'], $parameters['bundle']);
    $field = field_info_field($parameters['field-name']);
  }

  if (empty($instance) || empty($field)) {
    // Invalid parameters.
    // @TODO another arthur hack to make things "work"
    // return;
  }
  $allowed_schemes = $instance['widget']['settings']['allowed_schemes'];
  $directory = $instance['settings']['file_directory'];
  $extensions = $instance['settings']['file_extensions'];
  $scheme = $field['settings']['uri_scheme'];
  // set our directory
  $regex = '/[^.]+\.(' . preg_replace('/ +/', '|', preg_quote($extensions)) . ')$/i';
  $files = file_scan_directory($scheme . '://' . $directory, $regex, array('recurse' => true));

  // @TODO testing for now, sorry peter
  $files = file_scan_directory(file_directory_path(), "/.*/");

  foreach($files as $id => $file) {
    $file->filemime = file_get_mimetype($file->uri);
  }

   // TODO: scan again and add directories.  file_scan_directory() sucks.
   return theme('media_browser_content_frame', array('files' => $files, 'parameters' => $parameters, 'invoke' => $invoke));
}


/**
 * Format Media File form
 *
 * @param string $node_type
 * @param string $field
 * @param string $file_extension
 * @param string $uri
 * @return array
 *   Return a form array.
*/
function media_file_formatter_form($node_type, $field, $file_extension, $uri) {
  if ($uri) {
    $form['display'] = array(
      '#type'  => 'item',
      '#value' => l($uri, $uri),
    );
    $form['list'] = array(
      '#type'          => 'checkbox',
      '#title'         => 'List file',
      '#default_value' => TRUE,
    );
  }

  return $form;
}

/**
 * Implementation of registration media_file_resource_add_file
 *
 * @param string $node_type
 *   drupal node type
 * @param string $field
 *   field name that is being overridden
 * @param int $uid
 *   user id
 */
function media_file_resource_add_file($node_type, $field, $uid) {
  return array(
    t('Add files') => array(
      t('New file')  => media_resource_display_upload_form(),
    )
  );
}

/**
 * Implementation of registration media_file_resource_embed_file
 *
 * @param string $node_type
 * @param string $field
 * @param int $uid
 */
function media_file_resource_embed_file($node_type, $field, $uid) {
  return array(
    t('Add files') => array(
      t('Embeded file') => _media_file_display_embed_form(),
    )
  );
}

/**
 * Display the file form for the tab
 *
 * @return array
 *   Form array containing a textarea
 */
function _media_file_display_embed_form() {
  $form['media_file']['file'] = array(
    '#type'  => 'textarea',
    '#title' => t('File your file'),
   );

   return $form;
}

/**
 * Implementation of hook_media_action
 *
 * @TODO: Implement and document
 */
function media_file_media_action(&$form, $form_state, $op = '') {
  dsm("In the Media File action handler. Implement switch and carry out tasks.");
  dsm($op);
  dsm($form_state);
  dsm($form);
}
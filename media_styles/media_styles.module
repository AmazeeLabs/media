<?php
// $Id$

/**
 *  @file
 *  Media widget formatter definitions.
 */

/**
 * Media constant for user style bundles in the database.
 */
define('MEDIA_STORAGE_NORMAL', 1);

/**
 * Media constant for user style bundles that override module-defined bundles.
 */
define('MEDIA_STORAGE_OVERRIDE', 2);

/**
 * Media constant for module-defined bundles in code.
 */
define('MEDIA_STORAGE_DEFAULT', 4);

/**
 * Media constant to represent an editable preset.
 */
define('MEDIA_STORAGE_EDITABLE', MEDIA_STORAGE_NORMAL | MEDIA_STORAGE_OVERRIDE);

/**
 * Media constant to represent any module-based preset.
 */
define('MEDIA_STORAGE_MODULE', MEDIA_STORAGE_OVERRIDE | MEDIA_STORAGE_DEFAULT);

/**
 * Implement hook_menu().
 */
function media_styles_menu() {
  $items = array();

//   $items['media/generate/%media_style'] = array(
//     'title' => 'Generate media style',
//     'page callback' => 'media_style_generate',
//     'page arguments' => array(2),
//     'access callback' => TRUE,
//     'type' => MENU_CALLBACK,
//   );
  $items['admin/config/media/media-styles'] = array(
    'title' => 'Media styles',
    'description' => 'Configure media styles that can be used for resizing or adjusting media on display.',
    'page callback' => 'media_style_list',
    'access arguments' => array('administer media styles'),
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/list'] = array(
    'title' => 'List',
    'description' => 'List the current media styles on the site.',
    'page callback' => 'media_style_list',
    'access arguments' => array('administer media styles'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/add'] = array(
    'title' => 'Add style',
    'description' => 'Add a new media style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_add_form'),
    'access arguments' => array('administer media styles'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style'] = array(
    'title' => 'Edit style',
    'description' => 'Configure an media style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_form', 5),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/delete/%media_style'] = array(
    'title' => 'Delete style',
    'description' => 'Delete an media style.',
    'load arguments' => array(NULL, (string) MEDIA_STORAGE_NORMAL),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_delete_form', 5),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/revert/%media_style'] = array(
    'title' => 'Revert style',
    'description' => 'Revert an media style.',
    'load arguments' => array(NULL, (string) MEDIA_STORAGE_OVERRIDE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_revert_form', 5),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style/effects/%media_effect'] = array(
    'title' => 'Edit media effect',
    'description' => 'Edit an exiting effect within a style.',
    'load arguments' => array(5, (string) MEDIA_STORAGE_EDITABLE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_effect_form', 5, 7),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style/effects/%media_effect/delete'] = array(
    'title' => 'Delete media effect',
    'description' => 'Delete an exiting effect from a style.',
    'load arguments' => array(5, (string) MEDIA_STORAGE_EDITABLE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_effect_delete_form', 5, 7),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style/add/%media_effect_definition'] = array(
    'title' => 'Add media effect',
    'description' => 'Add a new effect to a style.',
    'load arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_effect_form', 5, 7),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );

  return $items;
}

/**
 *  Implement hook_field_formatter_info().
 */
function media_styles_field_formatter_info() {
  $styles = array();

  // Each Media Style bundle becomes a new formatter for File (media) fields.
  foreach (media_style_bundles() as $bundle_name => $bundle) {
    $styles[$bundle_name] = array(
      'label' => $bundle['label'],
      'field types' => array('media_generic', 'file'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    );
  }

  return $styles;
}

/**
 *  Build a list of all registered Media style bundles.
 *
 *  Each style within a bundle will be attached to a specific mimetype, and
 *  will be invoked as required when displaying a file field instance.
 *
 *  To register a new display formatter for a specific mimetype to be made
 *  available to the system, you will need to implement
 *  hook_media_styles($mimetype).
 *
 *  To register a default, module-defined bundle of Media styles, you will
 *  need to implement hook_media_default_style_bundles().
 *
 *  See API.txt for more information.
 *
 *  @return
 *    This returns an array of all media style bundles, keyed by the style
 *    bundle names.
 */
function media_style_bundles() {
  $styles = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($styles)) {
    if ($cache = cache_get('media_style_bundles', 'cache')) {
      $styles = $cache->data;
    }
    else {
      $styles = array();

      // Select the module-defined styles.
      foreach (module_implements('media_default_style_bundles') as $module) {
        $module_styles = module_invoke($module, 'media_default_style_bundles');
        foreach ($module_styles as $style_name => $style) {
          $style['name'] = $style_name;
          $style['module'] = $module;
          $style['storage'] = MEDIA_STORAGE_DEFAULT;
          $styles[$style_name] = $style;
        }
      }

      // Select all the user-defined styles.
      $user_styles = db_select('media_style_bundles', NULL, array('fetch' => PDO::FETCH_ASSOC))
        ->fields('media_style_bundles')
        ->orderBy('name')
        ->execute()
        ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

      // Allow the user styles to override the module styles.
      foreach ($user_styles as $style_name => $style) {
        $style['module'] = NULL;
        $style['storage'] = MEDIA_STORAGE_NORMAL;

        // Formatters will be an array of module-defined formatters keyed by
        // mimetype.
        $style['formatters'] = unserialize($style['formatters']);
        if (isset($styles[$style_name]['module'])) {
          $style['module'] = $styles[$style_name]['module'];
          $style['storage'] = MEDIA_STORAGE_OVERRIDE;
        }
        $styles[$style_name] = $style;
      }

      // Allow any module implementing hook_media_style_bundles to alter the styles.
      drupal_alter('media_style_bundles', $styles);
      cache_set('media_style_bundles', $styles);
    }
  }

  return $styles;
}


/**
 * Implement hook_theme().
 */
function media_styles_theme() {
  return array(
    // Theme functions in media_styles.module.
    'media_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'alt' => '',
        'title' => '',
        'attributes' => array(),
        'getsize' => TRUE,
      ),
    ),

    // Theme functions in media_styles.admin.inc.
    'media_style_list' => array(
      'variables' => array('styles' => NULL),
    ),
  );
}

/**
 * Implement hook_permission().
 */
function media_styles_permission() {
  return array(
    'administer media styles' => array(
      'title' => t('Administer media styles'),
      'description' => t('Create and modify styles for generating media modifications such as thumbnails.'),
    ),
  );
}

/**
 * Implement hook_flush_caches().
 */
function media_styles_flush_caches() {
  return array('cache_media_styles');
}

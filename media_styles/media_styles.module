<?php
// $Id$

/**
 *  @file
 *  Media widget formatter definitions.
 */

function media_styles_styles_containers() {
  return array(
    'media_styles_image' => array(
      'label' => t('Image Styles'),
      'preview theme' => 'image_style_preview',
      'data' => array(
        'streams' => array(
          'public://',
          'private://',
        ),
        'mimetypes' => array(
          'image/png',
          'image/gif',
          'image/jpeg',
        ),
      ),
      'help' => t('Image Styles will transform images to your choosing, such as by scaling and cropping. You can !manage.', array('!manage' => l(t('manage your image styles here'), 'admin/config/image/image-styles'))),
    ),
  );
}

function media_styles_styles_styles() {
  $styles = array();
  foreach (image_styles() as $style_name => $style) {
    $styles[$style_name] = $style;
  }
  return array(
    'media_styles_image' => $styles,
  );
}

function theme_media_styles_image_style_preview($variables) {
  module_load_include('inc', 'image', 'image.admin');
  dpm(drupal_add_css(drupal_get_path('module', 'image') . '/image.admin.css'));
  $style_name = $variables['style_name'];
  $styles = styles_containers_available_styles('media_styles');
  return theme('image_style_preview', array('style' => $styles[$style_name]));
}

/**
 * Media constant for user styles in the database.
 */
define('MEDIA_STORAGE_NORMAL', 1);

/**
 * Media constant for user styles that override module-defined styles.
 */
define('MEDIA_STORAGE_OVERRIDE', 2);

/**
 * Media constant for module-defined styles in code.
 */
define('MEDIA_STORAGE_DEFAULT', 4);

/**
 * Media constant to represent an editable preset.
 */
define('MEDIA_STORAGE_EDITABLE', MEDIA_STORAGE_NORMAL | MEDIA_STORAGE_OVERRIDE);

/**
 * Media constant to represent any module-based preset.
 */
define('MEDIA_STORAGE_MODULE', MEDIA_STORAGE_OVERRIDE | MEDIA_STORAGE_DEFAULT);

/**
 * Implement hook_menu().
 */
function media_styles_menu() {
  $items = array();

//   $items['media/generate/%media_style'] = array(
//     'title' => 'Generate media style',
//     'page callback' => 'media_style_generate',
//     'page arguments' => array(2),
//     'access callback' => TRUE,
//     'type' => MENU_CALLBACK,
//   );
  $items['admin/config/media/media-styles'] = array(
    'title' => 'Media styles',
    'description' => 'Configure media styles that can be used for resizing or adjusting media on display.',
    'page callback' => 'media_style_list',
    'access arguments' => array('administer media styles'),
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/list'] = array(
    'title' => 'List',
    'description' => 'List the current media styles on the site.',
    'page callback' => 'media_style_list',
    'access arguments' => array('administer media styles'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/add'] = array(
    'title' => 'Add style',
    'description' => 'Add a new media style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_add_form'),
    'access arguments' => array('administer media styles'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style'] = array(
    'title' => 'Edit style',
    'description' => 'Configure an media style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_form', 5),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/delete/%media_style'] = array(
    'title' => 'Delete style',
    'description' => 'Delete an media style.',
    'load arguments' => array(NULL, (string) MEDIA_STORAGE_NORMAL),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_delete_form', 5),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/revert/%media_style'] = array(
    'title' => 'Revert style',
    'description' => 'Revert an media style.',
    'load arguments' => array(NULL, (string) MEDIA_STORAGE_OVERRIDE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_style_revert_form', 5),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style/effects/%media_effect'] = array(
    'title' => 'Edit media effect',
    'description' => 'Edit an exiting effect within a style.',
    'load arguments' => array(5, (string) MEDIA_STORAGE_EDITABLE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_effect_form', 5, 7),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style/effects/%media_effect/delete'] = array(
    'title' => 'Delete media effect',
    'description' => 'Delete an exiting effect from a style.',
    'load arguments' => array(5, (string) MEDIA_STORAGE_EDITABLE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_effect_delete_form', 5, 7),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );
  $items['admin/config/media/media-styles/edit/%media_style/add/%media_effect_definition'] = array(
    'title' => 'Add media effect',
    'description' => 'Add a new effect to a style.',
    'load arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_effect_form', 5, 7),
    'access arguments' => array('administer media styles'),
    'type' => MENU_CALLBACK,
    'file' => 'media_styles.admin.inc',
  );

  return $items;
}

/**
 *  Implement hook_field_formatter_info().
 */
function media_styles_field_formatter_info() {
  $styles = array();

  // Each Media Style becomes a new formatter for File (media) fields.
  foreach (media_styles() as $style_name => $style) {
    $styles[$style_name] = array(
      'label' => $style['label'],
      'field types' => array('media_generic', 'file', 'image'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    );
  }

  return $styles;
}

// function media_styles() {
//   return styles_containers_available_styles('media_styles');
// }

/**
 * Get an array of all styles and their settings.
 *
 * @return
 *   An array of styles keyed by the image style ID (isid).
 * @see image_style_load()
 */
function media_styles() {
  $styles = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($styles)) {
    if ($cache = cache_get('media_styles', 'cache')) {
      $styles = $cache->data;
    }
    else {
      $styles = array();

      // Select the module-defined styles.
      foreach (module_implements('media_default_styles') as $module) {
        $module_styles = module_invoke($module, 'media_default_styles');
        foreach ($module_styles as $style_name => $style) {
          $style['name'] = $style_name;
          $style['module'] = $module;
          $style['storage'] = MEDIA_STORAGE_DEFAULT;
          foreach ($style['effects'] as $ieid => $effect) {
            $definition = media_effect_definition_load($effect['name']);
            $effect = array_merge($definition, $effect);
            $effect['meid'] = $ieid;
            $style['effects'][$ieid] = $effect;
          }
          $styles[$style_name] = $style;
        }
      }

      // Select all the user-defined styles.
      $user_styles = db_select('media_styles', NULL, array('fetch' => PDO::FETCH_ASSOC))
        ->fields('media_styles')
        ->orderBy('name')
        ->execute()
        ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

      // Allow the user styles to override the module styles.
      foreach ($user_styles as $style_name => $style) {
        $style['module'] = NULL;
        $style['storage'] = IMAGE_STORAGE_NORMAL;
        $style['effects'] = image_style_effects($style);
        if (isset($styles[$style_name]['module'])) {
          $style['module'] = $styles[$style_name]['module'];
          $style['storage'] = IMAGE_STORAGE_OVERRIDE;
        }
        $styles[$style_name] = $style;
      }

      drupal_alter('media_styles', $styles);
      cache_set('media_styles', $styles);
    }
  }

  return $styles;
}

/**
 *  Build a list of all registered Media styles.
 *
 *  Each effect within a style will be attached to a specific mimetype, and
 *  will be invoked as required when displaying a file field instance.
 *
 *  To register a new display formatter for a specific mimetype to be made
 *  available to the system, you will need to implement
 *  hook_media_styles($mimetype).
 *
 *  To register a default, module-defined style of Media effects, you will
 *  need to implement hook_media_styles_default_styles().
 *
 *  See API.txt for more information.
 *
 *  @return
 *    This returns an array of all media styles, keyed by the style names.
 */
function hhhmedia_styles() {
  $styles = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($styles)) {
    if ($cache = cache_get('media_styles', 'cache')) {
      $styles = $cache->data;
    }
    else {
      $styles = array();

      // Select the module-defined styles.
      foreach (module_implements('media_styles_default_styles') as $module) {
        $module_styles = module_invoke($module, 'media_styles_default_styles');
        foreach ($module_styles as $style_name => $style) {
          $style['name'] = $style_name;
          $style['module'] = $module;
          $style['storage'] = MEDIA_STORAGE_DEFAULT;
          $styles[$style_name] = $style;
        }
      }

      // Select all the user-defined styles.
      $user_styles = db_select('media_styles', NULL, array('fetch' => PDO::FETCH_ASSOC))
        ->fields('media_styles')
        ->orderBy('name')
        ->execute()
        ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

      // Allow the user styles to override the module styles.
      foreach ($user_styles as $style_name => $style) {
        $style['module'] = NULL;
        $style['storage'] = MEDIA_STORAGE_NORMAL;

        // Formatters will be an array of module-defined formatters keyed by
        // mimetype.
//         $style['formatters'] = unserialize($style['formatters']);
        if (isset($styles[$style_name]['module'])) {
          $style['module'] = $styles[$style_name]['module'];
          $style['storage'] = MEDIA_STORAGE_OVERRIDE;
        }
        $styles[$style_name] = $style;
      }

      // Allow any module implementing hook_media_style_bundles to alter the styles.
      drupal_alter('media_styles', $styles);
      cache_set('media_styles', $styles);
    }
  }

  return $styles;
}


/**
 * Implement hook_theme().
 */
function media_styles_theme() {
  return array(
    // Theme functions in media_styles.module.
    'media_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'alt' => '',
        'title' => '',
        'attributes' => array(),
        'getsize' => TRUE,
      ),
    ),

    // Theme functions in media_styles.admin.inc.
    'media_style_list' => array(
      'variables' => array('styles' => NULL),
    ),
  );
}

/**
 * Implement hook_permission().
 */
function media_styles_permission() {
  return array(
    'administer media styles' => array(
      'title' => t('Administer media styles'),
      'description' => t('Create and modify styles for generating media modifications such as display size.'),
    ),
  );
}

/**
 * Implement hook_flush_caches().
 */
function media_styles_flush_caches() {
  return array('cache_media_styles');
}

/**
 * Save a media style.
 *
 * @param style
 *   An media style array.
 * @return
 *   An media style array. In the case of a new style, 'msid' will be populated.
 */
function media_style_save($style) {
  if (isset($style['msid']) && is_numeric($style['msid'])) {
    // Load the existing style to make sure we account for renamed styles.
    $old_style = image_style_load(NULL, $style['msid']);
    media_style_flush($old_style);
    drupal_write_record('media_styles', $style, 'msid');
    if ($old_style['name'] != $style['name']) {
      $style['old_name'] = $old_style['name'];
    }
  }
  else {
    drupal_write_record('media_styles', $style);
    $style['is_new'] = TRUE;
  }

  // Let other modules update as necessary on save.
  module_invoke_all('media_style_save', $style);

  // Clear all caches and flush.
  media_style_flush($style);

  return $style;
}

/**
 * Flush cached media for a style.
 *
 * @param $style
 *   An image style array.
 */
function media_style_flush($style) {
  $style_directory = drupal_realpath(variable_get('file_default_scheme', 'public') . '://styles/' . $style['name']);
  if (is_dir($style_directory)) {
    file_unmanaged_delete_recursive($style_directory);
  }

  // Let other modules update as necessary on flush.
  module_invoke_all('media_style_flush', $style);

  // Clear image style and effect caches.
  cache_clear_all('media_styles', 'cache');
//   cache_clear_all('media_effects', 'cache');
  drupal_static_reset('media_styles');
//   drupal_static_reset('media_effects');

  // Clear field caches so that formatters may be added for this style.
  field_info_cache_clear();
  drupal_theme_rebuild();

  // Clear page caches when flushing.
  if (module_exists('block')) {
    cache_clear_all('*', 'cache_block', TRUE);
  }
  cache_clear_all('*', 'cache_page', TRUE);
}

/**
 * Load a style by style name or ID. May be used as a loader for menu items.
 *
 * @param $name
 *   The name of the style.
 * @param $isid
 *   Optional. The numeric id of a style if the name is not known.
 * @param $include
 *   If set, this loader will restrict to a specific type of media style, may be
 *   one of the defined Image style storage constants.
 * @return
 *   An image style array containing the following keys:
 *   - "msid": The unique media style ID.
 *   - "name": The unique media style name.
 *   - "effects": An array of media effects within this media style.
 *   If the media style name or ID is not valid, an empty array is returned.
 * @see media_effect_load()
 */
function media_style_load($name = NULL, $isid = NULL, $include = NULL) {
  $styles = media_styles();

  // If retrieving by name.
  if (isset($name) && isset($styles[$name])) {
    $style = $styles[$name];
  }

  // If retrieving by media style id.
  if (!isset($name) && isset($isid)) {
    foreach ($styles as $name => $database_style) {
      if (isset($database_style['msid']) && $database_style['msid'] == $isid) {
        break;
      }
    }
  }

  // Restrict to the specific type of flag. This bitwise operation basically
  // states "if the storage is X, then allow".
  if (isset($style) && (!isset($include) || ($style['storage'] & (int) $include))) {
    return $style;
  }

  // Otherwise the style was not found.
  return FALSE;
}

/**
 * Pull in media effects exposed by modules implementing hook_media_effect_info().
 *
 * @return
 *   An array of media effects to be used when transforming media.
 * @see hook_media_effect_info()
 * @see media_effect_definition_load()
 */
function media_effect_definitions() {
  $effects = &drupal_static(__FUNCTION__);

  if (!isset($effects)) {
    if ($cache = cache_get('media_effects') && !empty($cache->data)) {
      $effects = $cache->data;
    }
    else {
      $effects = array();
      module_load_include('inc', 'media_styles', 'media_styles.effects');
      foreach (module_implements('media_effect_info') as $module) {
        foreach (module_invoke($module, 'media_effect_info') as $name => $effect) {
          // Ensure the current toolkit supports the effect.
          $effect['module'] = $module;
          $effect['name'] = $name;
          $effect['data'] = isset($effect['data']) ? $effect['data'] : array();
          $effects[$name] = $effect;
        };
      }
      uasort($effects, '_media_effect_definitions_sort');
      cache_set('media_effects', $effects);
    }
  }

  return $effects;
}

/**
 * Internal function for sorting media effect definitions through uasort().
 *
 * @see media_effect_definitions()
 */
function _media_effect_definitions_sort($a, $b) {
  return strcasecmp($a['name'], $b['name']);
}

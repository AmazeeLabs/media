<?php
//$Id;

/**
 * Implement hook_menu();
 */
function media_gallery_menu() {
  $items = array();

  $items['admin/config/media/gallery'] = array(
    'title' => 'Galleries',
    'description' => 'Configure galleries and slideshows.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_admin_settings'),
    'access arguments' => array('administer media galleries'),
    'file' => 'media_gallery.admin.inc',
  );
  
  $items['admin/content/gallery'] = array(
    'title' => 'Galleries',
    'description' => 'Gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_admin_list'),
    'access arguments' => array('administer media galleries'),
    'file' => 'media_gallery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['gallery/add'] = array(
    'title' => 'Create Gallery',
    'description' => 'Gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_form'),
    'access arguments' => array('create media galleries'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media_gallery.pages.inc', // Should be pages.inc
  );

  $items['admin/content/gallery/add'] = $items['gallery/add'];

  $items['gallery/%media_gallery/edit'] = array(
    'title' => 'Edit Gallery',
    'description' => 'Gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_form', 1),
    'access arguments' => array('create media galleries'),
    'file' => 'media_gallery.pages.inc', // Should be pages.inc
  );
  
  $items['admin/content/gallery/%media_gallery/edit'] = $items['gallery/%media_gallery/edit'];
  $items['admin/content/gallery/%media_gallery/edit']['page arguments'] = array('media_gallery_form', 3);

  $items['gallery/%media_gallery'] = array(
    'title' => 'View Gallery',
    'description' => 'Gallery',
    'page callback' => 'media_gallery_view',
    //'page callback' => array(1),
    'access arguments' => array('view content'),
    'file' => 'media_gallery.pages.inc',
  );


  return $items;
}

/**
 * Implement hook_entity_info();
 */
function media_gallery_entity_info() {
  $view_modes = array(
    'slideshow' => array('label' => t('Slideshow')),
    'thumbnails' => array('label' => t('Thumbnails')),
  );

  $return = array(
    'gallery' => array(
      'label' => t('Gallery'),
  	  'entity class' => 'Gallery',
      'controller class' => 'EntityAPIController',
      'base table' => 'gallery',
      'fieldable' => TRUE,
      'view modes' => $view_modes,
      'object keys' => array(
        'id' => 'gid',
        //'bundle' => 'type', // @TODO: Why 'type' here...
      ),
      'bundles' => array(
        'gallery' => array(
          'label' => t('Gallery'),
          'admin' => array(
            'path' => 'admin/config/media/gallery',
            'access arguments' => array('administer media galleries'),
          ),
        ),
      ),
    ),
  );
  
  // @TODO: Do we need to define search-related view modes for attached fields?
  return $return;
}


/**
 * Implement hook_field_ui_view_modes_tabs();
 */
function media_gallery_field_ui_view_modes_tabs() {
  $view_modes = array(
    'slideshow' => array('label' => t('Slideshow')),
    'thumbnails' => array('label' => t('Thumbnails')),
  );
  $modes = array(
    'basic' => array(
      'view modes' => array_keys($view_modes),
    ),
  );
  return $modes;
}

/**
 * Menu page argument loader
 */
function media_gallery_load($gid) {
  if (!is_numeric($gid)) {
    return;
    //Getting call twice for some reason
  }
  $ids = array($gid);
  $galleries = entity_get_controller('gallery')->load($ids);
  return array_shift($galleries);
}

/**
 * Implement hook_field_widget_info().
 */
function media_gallery_field_widget_info() {
  return array(
    'media_gallery_item' => array(
      'label' => t('Media item for Gallery'),
      'field types' => array('media'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'allowed_types' => array('image'),
        'allowed_schemes' => array('public', 'private'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implement hook_field_widget_settings_form().
 */
function media_gallery_field_widget_settings_form($field, $instance) {
  return media_field_widget_settings_form($field, $instance);
}


/**
 *  Implement hook_field_widget_form().
 */
function media_gallery_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = media_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base);
  $element['#process'][] = 'media_gallery_widget_process';
  $element['#value_callback'] = 'media_gallery_field_widget_value';
  $element['#extended'] = TRUE;
  return $element;
}


/**
 * Build the Gallery object and rebuild the form when receiving an #ajax callback.
 *
 * This is required for the multiple-value fields to work.
 */
function media_gallery_form_submit_build_gallery($form, &$form_state) {
  if ($form_state['values']) {
    $gallery = new Gallery($form_state['values']);
  }
  else {
    $gallery = new Gallery();
  }

  field_attach_submit('gallery', $gallery, $form, $form_state);

  $form_state['gallery'] = $gallery; // uh, wtf is this.
  $form_state['rebuild'] = TRUE;
  return $gallery;
}


/**
 * An element #process callback for media_gallery_item widget
 *
 * Adds description and link fields to the standard media widget.
 */
function media_gallery_widget_process($element, &$form_state, $form) {
  $description = NULL;
  $link = NULL;
  $data = !empty($element['#default_value']['data']) ? $element['#default_value']['data'] : NULL;
  if ($data) {
    $description = $data['description'];
    $link = $data['link'];
  }
  
  $element['description'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => 'Description',
    '#default_value' => $description,
  );

  $element['link'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => 'Link',
    '#default_value' => $link,
  );
  
  return $element;
}

/**
 * The #value_callback for the file_generic field element.
 */
function media_gallery_field_widget_value($element, $input = FALSE, $form_state) {
  $return = array();

  if ($input) {
    $return = $input;
    $return['data'] = array('link' => $input['link'], 'description' => $input['description']);
  }
  
  return media_field_widget_value($element, $return, $form_state);
}


class Gallery extends EntityDb {
  public function __construct($values = array()) {
    parent::__construct($values, 'gallery');
  }
}
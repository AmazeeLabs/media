<?php
//$Id$

/**
 * Implement hook_menu();
 */
function media_gallery_menu() {
  $items = array();
  
  $items['gallery/add'] = array(
    'title' => 'Create gallery',
    'description' => 'Gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_form'),
    'access arguments' => array('create media galleries'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media_gallery.pages.inc', // Should be pages.inc
  );

  $items['gallery/%media_gallery/edit'] = array(
    'title' => 'Edit gallery',
    'description' => 'Gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_form', 1),
    'access arguments' => array('create media galleries'),
    'file' => 'media_gallery.pages.inc', // Should be pages.inc
    'type' => MENU_LOCAL_TASK,
  );

  $items['gallery/%media_gallery/view'] = array(
    'title' => 'View gallery',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['gallery/%media_gallery'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'View gallery',
    'description' => 'Gallery',
    'page callback' => 'media_gallery_view_standalone',
    'page arguments' => array(1),
    'access arguments' => array('view content'),
    'file' => 'media_gallery.pages.inc',
  );

  $items['admin/config/media/gallery'] = array(
    'title' => 'Galleries',
    'description' => 'Configure galleries and slideshows.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_admin_settings'),
    'access arguments' => array('administer media galleries'),
    'file' => 'media_gallery.admin.inc',
  );

  $items['admin/content/gallery'] = array(
    'title' => 'Galleries',
    'description' => 'Gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_gallery_admin_list'),
    'access arguments' => array('administer media galleries'),
    'file' => 'media_gallery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/content/gallery/add'] = $items['gallery/add'];

  $items['admin/content/gallery/%media_gallery/edit'] = $items['gallery/%media_gallery/edit'];
  $items['admin/content/gallery/%media_gallery/edit']['type'] = MENU_CALLBACK;
  $items['admin/content/gallery/%media_gallery/edit']['page arguments'] = array('media_gallery_form', 3);

  $items['admin/content/gallery/%media_gallery/embed'] = array(
    'title' => 'Embed gallery',
    'description' => 'Creates a block for the gallery',
    'page callback' => 'media_gallery_embed',
    'page arguments' => array(3),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'media_gallery.admin.inc', // Should be pages.inc
  );
  
  return $items;
}

/**
 * Implements hook_block_info().
 */
function media_gallery_block_info() {
  $blocks = array();

  $result = db_select('gallery_blocks', 'gb')
    ->fields('gb')
    ->execute()
    ->fetchAll();
  foreach ($result as $row) {
    $ids = array($row->gid);
    $gallery = array_shift(entity_get_controller('gallery')->load($ids));
    $blocks[$row->delta] = array(
      'info' => t('[GALLERY] @gallery_name', array('@gallery_name' => $gallery->field_gallery_title[LANGUAGE_NONE][0]['value'])),
      //'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function media_gallery_block_configure($delta) {
  // @TODO: add some JS to handle view_type changes
  $info = entity_get_info('gallery');
  $settings = _media_gallery_block_settings_get($delta);
  

  foreach ($info['view modes'] as $key => $mode) {
    $view_modes[$key] = $mode['label'];
  }

  $form = array();

  $gid = db_select('gallery_blocks', 'gb')
    ->fields('gb', array('gid'))
    ->execute()
    ->fetchField();

  $gallery = array_shift(entity_get_controller('gallery')->load(array($gid)));
  $title = $gallery->field_gallery_title[LANGUAGE_NONE][0]['value'];

  $form['edit_link'] = array(
    '#markup' => l(t('Change images used in %gallery_title.', array('%gallery_title' => $title)), 'gallery/' . $gid . '/edit', array('html' => TRUE)),

  );
  $form['gallery_settings'] = array(
    '#tree' => TRUE,
  );

  // In the great future, you would be able to change this stuff.
  // Right now, you can only make a slide show.
  
  $form['gallery_settings']['view_mode'] = array(
    '#title' => 'Display type',
    '#type' => 'radios',
    '#options' => $view_modes,
    '#default_value' => $settings['view_mode'],
  );

  $form['gallery_settings']['display_settings'] = array();
  $form['gallery_settings']['display_settings']['slideshow'] = array(
    '#type' => 'fieldset',
    '#title' => t('Slideshow settings'),
  );

  $form['gallery_settings']['display_settings']['thumbnails'] = array(
    '#type' => 'fieldset',
    '#title' => t('Thumbnail gallery settings'),
  );

  // Okay, now undo the above abstraction until we can really make it work.
  $form['gallery_settings']['view_mode']['#type'] = 'hidden';
  $form['gallery_settings']['view_mode']['#value'] = 'slideshow';
  unset($form['gallery_settings']['display_settings']['thumbnails']);

  $form['gallery_settings']['display_settings']['slideshow']['fx'] = array(
    '#type' => 'select',
    '#options' => array(
      'fade' => 'Fade',
      'scrollLeft' => 'Scroll Left',
      'scrollRight' => 'Scroll Right',
      'scrollUp' => 'Scroll Up',
    ),
    '#default_value' => $settings['display_settings']['slideshow']['fx'],
  );

  $form['gallery_settings']['display_settings']['slideshow']['timeout'] = array(
    '#title' => t('Delay between slides in millisecondss.'),
    '#type' => 'textfield',
    '#description' => t('Leave blank to disable automatic transition.'),
    '#default_value' => $settings['display_settings']['slideshow']['timeout'],
  );

  return $form;
}


/**
 * Implements hook_block_save().
 */
function media_gallery_block_save($delta, $edit = array()) {
  $settings = serialize($edit['gallery_settings']);
  db_update('gallery_blocks')
    ->fields(array('settings' => $settings))
    ->execute();
}

/**
 * Implements hook_block_view().
 */
function media_gallery_block_view($delta) {
  $gid = db_select('gallery_blocks', 'gb')
    ->fields('gb', array('gid'))
    ->execute()
    ->fetchField();
  $gallery = array_shift(entity_get_controller('gallery')->load(array($gid)));
  $settings = _media_gallery_block_settings_get($delta);

  $content = media_gallery_view($gallery, $settings['view_mode'], $settings['display_settings'][$settings['view_mode']]);
  return array('content' => $content);
}

/**
 * Helper function for getting settings for gallery display blocks.
 *
 * @param <type> $delta
 * @return <type>
 */
function _media_gallery_block_settings_get($delta) {
  $defaults = array(
    'view_mode' => 'slideshow',
    'display_settings' => array(
      'slideshow' => array(
        'fx' => 'fade',
        'timeout' => 4000,
      ),

      'thumbnails' => array(
      ),
    ),
  );

  $settings = db_select('gallery_blocks', 'gb')
    ->fields('gb', array('settings'))
    ->condition('delta', $delta)
    ->execute()
    ->fetchField();
  if ($settings) {
    $settings = unserialize($settings);
  }

  if (!$settings) {
    $settings = array();
  }

  /**
   * This kinda sucks, but since array_merge_recursive doesn't really do what it
   * says, I don't know how to fix this.
   */
  return $settings + $defaults;

}

/**
 * Implement hook_entity_info();
 */
function media_gallery_entity_info() {
  $view_modes = array(
    'slideshow' => array('label' => t('Slideshow')),
    'thumbnails' => array('label' => t('Thumbnails')),
  );

  $return = array(
    'gallery' => array(
      'label' => t('Gallery'),
  	  'entity class' => 'Gallery',
      'controller class' => 'EntityAPIController',
      'base table' => 'gallery',
      'fieldable' => TRUE,
      'view modes' => $view_modes,
      'object keys' => array(
        'id' => 'gid',
        //'bundle' => 'type', // @TODO: Why 'type' here...
      ),
      'bundles' => array(
        'gallery' => array(
          'label' => t('Gallery'),
          'admin' => array(
            'path' => 'admin/config/media/gallery',
            'access arguments' => array('administer media galleries'),
          ),
        ),
      ),
    ),
  );
  
  // @TODO: Do we need to define search-related view modes for attached fields?
  return $return;
}

/**
 * Implement hook_field_ui_view_modes_tabs();
 */
function media_gallery_field_ui_view_modes_tabs() {
  $view_modes = array(
    'slideshow' => array('label' => t('Slideshow')),
    'thumbnails' => array('label' => t('Thumbnails')),
  );
  $modes = array(
    'basic' => array(
      'view modes' => array_keys($view_modes),
    ),
  );
  return $modes;
}

/**
 * Menu page argument loader
 */
function media_gallery_load($gid) {
  if (!is_numeric($gid)) {
    return;
    //Getting call twice for some reason
  }
  $ids = array($gid);
  $galleries = entity_get_controller('gallery')->load($ids);
  return array_shift($galleries);
}

/**
 * Implement hook_field_widget_info().
 */
function media_gallery_field_widget_info() {
  return array(
    'media_gallery_item' => array(
      'label' => t('Media item for Gallery'),
      'field types' => array('media'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'allowed_types' => array('image'),
        'allowed_schemes' => array('public', 'private'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implement hook_field_widget_settings_form().
 */
function media_gallery_field_widget_settings_form($field, $instance) {
  return media_field_widget_settings_form($field, $instance);
}


/**
 *  Implement hook_field_widget_form().
 */
function media_gallery_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = media_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base);
  $element['#process'][] = 'media_gallery_widget_process';
  $element['#value_callback'] = 'media_gallery_field_widget_value';
  $element['#extended'] = TRUE;
  $element['#attached'] = isset($element['#attached']) ? $element['#attached'] : array();
  $element['#attached']['js'] = isset($element['#attached']['js']) ? $element['#attached']['js'] : array();
  $element['#attached']['css'] = isset($element['#attached']['css']) ? $element['#attached']['css'] : array();
  $path = drupal_get_path('module', 'media_gallery');
  $element['#attached']['css'][] = $path . '/media_gallery.css';
  $element['#attached']['js'][] = $path . '/media_gallery.js';
  return $element;
}


/**
 * Build the Gallery object and rebuild the form when receiving an #ajax callback.
 *
 * This is required for the multiple-value fields to work.
 */
function media_gallery_form_submit_build_gallery($form, &$form_state) {
  if ($form_state['values']) {
    $gallery = new Gallery($form_state['values']);
  }
  else {
    $gallery = new Gallery();
  }

  field_attach_submit('gallery', $gallery, $form, $form_state);

  $form_state['gallery'] = $gallery; // uh, wtf is this.
  $form_state['rebuild'] = TRUE;
  return $gallery;
}


/**
 * An element #process callback for media_gallery_item widget
 *
 * Adds description and link fields to the standard media widget.
 */
function media_gallery_widget_process($element, &$form_state, $form) {
  $description = NULL;
  $link = NULL;
  $data = !empty($element['#default_value']['data']) ? $element['#default_value']['data'] : NULL;
  if ($data) {
    $description = $data['description'];
    $link = $data['link'];
  }
  
  $class = empty($element['#default_value']['fid']) ? 'media-widget-open' : 'media-widget-closed' ;
  _form_set_class($element, array($class));

  $element['more_fields'] = array(
    '#type' => 'markup',
    '#markup' => '<a class="edit-description-link" href="#">Edit description and link</a>',
  );

  $element['gallery_field_wrapper'] = array(
    '#type' => 'fieldset',
    '#tree' => FALSE,
    '#prefix' => '<div class="gallery-fields-wrapper">',
    '#suffix' => '</div>',
  );

  // Oh god, there must be a better way to add a wrapper.
  $parents = $element['#parents'];
  array_push($parents, 'description');

  $element['gallery_field_wrapper']['description'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => 'Description',
    '#default_value' => $description,
    '#parents' => $parents,
  );

  $parents = $element['#parents'];
  array_push($parents, 'link');
  $element['gallery_field_wrapper']['link'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => 'Link',
    '#tree' => TRUE,
    '#default_value' => $link,
    '#parents' => $parents,
  );
  
  return $element;
}

/**
 * The #value_callback for the file_generic field element.
 */
function media_gallery_field_widget_value($element, $input = FALSE, $form_state) {
  $return = array();
  
  if ($input) {
    $return = $input;
    $return['data'] = array('link' => $input['link'], 'description' => $input['description']);
  }
  
  return media_field_widget_value($element, $return, $form_state);
}

//list_field_formatter_view

/**
 * Implement hook_theme
 */
function media_gallery_theme() {
  return array(
    'media_gallery_slideshow' => array(
      'variables' => array('gallery' => NULL, 'element' => NULL),
    ),
  );
}

/**
 * Generates a renderable array for a gallery.
 * 
 * @param Gallery $gallery
 * @param string $view_mode
 * @param array $settings
 * @return array
 */
function media_gallery_view($gallery, $view_mode, $settings) {
  field_attach_prepare_view('gallery', array($gallery->gid => $gallery), $view_mode);
  entity_prepare_view('gallery', array($gallery->gid => $gallery));
  $element = field_attach_view('gallery', $gallery, $view_mode);
  // @todo
  $element['field_gallery_title']['access'] = FALSE;

  $media_galleries = array();
  $id = 'media-gallery-' . $gallery->gid;
  $media_galleries[$id] = $settings;
  drupal_add_js(array('media' => array('gallery' => $media_galleries)), 'setting');

  $element['#prefix'] = sprintf('<div class="%s" id="%s">', $view_mode . ' media-gallery', $id);
  $element['#suffix'] = '</div>';

  return theme('media_gallery_' . $view_mode, array('gallery' => $gallery, 'element' => $element));
}


function theme_media_gallery_slideshow($variables) {
  $gallery = $variables['gallery'];
  $element = $variables['element'];
  // This might be better as another module providing field formatters...
  // Anyway, for now.
  $path = drupal_get_path('module', 'media_gallery');
  
  $element['#attached']['js'][] = $path . '/includes/jquery.easing.js';
  $element['#attached']['js'][] = $path . '/includes/jquery.cycle.js';
  $element['#attached']['js'][] = $path . '/media_gallery.js';
  return $element;
}

if (!class_exists('EntityDB')) {
  if (basename($_SERVER["SCRIPT_NAME"]) != 'index.php') {
    // Don't show the warning if they are on update.php or running via drush.
    drupal_set_message('You must run update.php immediately to enable the entity module or Media will not function.', 'error');
  }
} else {
  /** Classes **/
  class Gallery extends EntityDB {
    public function __construct($values = array()) {
      parent::__construct($values, 'gallery');
    }
  }
}